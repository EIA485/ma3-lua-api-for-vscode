{
  "_Ma3_API_Version": "2.2",
  "AddFixtures": {
    "prefix": "AddFixtures(fixtureTable)",
    "body": [
      "AddFixtures(${1:fixtureTable})"
    ],
    "description": "Description\n-----------\n\nThe **AddFixture** Lua function adds fixtures to the patch. The argument for the function is a table, which must contain valid data for the function to succeed. The function returns a \"true\" boolean value if the addition was a success. The function must be run with the command line in the correct patch destination.\n\nArguments\n---------\n\n-   **Table**:\\\n    The table must contain valid data. This is a list of possible table elements. It is not necessary to add all elements.\n\n    -   **mode**:\\\n        This must be a **handle** to a valid \"dmx_mode\". This defines a specific fixture type in a specific mode.\n\n    -   **amount**:\\\n        This is an **integer** number that defines how many fixtures should be added.\n\n    -   **name** (optional):\\\n        This is a string with the name of the (first) fixture.\n\n    -   **fid** (optional):\\\n        This is a **string** with the fixture's FID.\n\n    -   **cid** (optional):\\\n        This is a **string** with the CID for the fixture. This table field is only valid if the \"idtype\" is not \"Fixture\".\n\n    -   **idtype** (optional):\\\n        This is a **string** with the name of the ID Type. This is only needed if the type is different than \"Fixture\".\n\n    -   **patch** (optional):\\\n        This is a **table** with up to eight **strings**. The string must indicate a universe and a start address in the universe. The two must be separated by a dot. Each table element is used for the up to eight DMX breaks in the patch.\n\n    -   **layer** (optional):\\\n        This is a **string** with the layer name.\n\n    -   **class** (optional):\\\n        This is a **string** with the class name.\n\n    -   **parent** (optional):\\\n        This is a **handle** of the parent fixture. It is only needed if the fixture should be a sub-fixture of an existing fixture.\n    -   **insert_index** (optional):\\\n        This is an **integer** indicating an insert index number.\n\n    -   **undo** (optional):\\\n        This is a **string** with an undo text.\n\nReturn\n------\n\n-   **Boolean** or **nil**:\\\n    The returned table contains key value pairs with configuration information. See the example below."

    ,
    "examples": {
      "1": {
        "description": "This example adds a dimmer fixture with FID and CID 301 and patch address \"10.001\". It is a requirement that the generic dimmer type is already added to the show and that the ID and patch address are available. The example does not perform any check for availability."
        
        ,
        "code": "return function()\n    -- Change the command line destination to the correct patch location.\n    Cmd(\"ChangeDestination Root\")\n    -- Enter the \"ShowData\".\n    Cmd('ChangeDestination 13')\n    -- Enter the \"Patch\".\n    Cmd(\"ChangeDestination 9\")\n    -- Enter the \"Stages\".\n    Cmd(\"ChangeDestination 6\")\n    -- Enter the first stage object.\n    Cmd(\"ChangeDestination 1\")\n    -- Enter the \"Fixtures\" part of the stage. \n    Cmd(\"ChangeDestination 2\")\n    \n    -- Create a table.\n    local myAddFixtureTable = {}\n    -- Set the mode to a 8-bit Dimmer fixture type. \n    myAddFixtureTable.mode = Patch().FixtureTypes.Dimmer.DMXModes[\"Mode 0\"]\n    -- Set the amount of fixtures.\n    myAddFixtureTable.amount = 1\n    -- Set the FID for the fixture.\n    myAddFixtureTable.fid = \"301\"\n    -- Set the IdType - it is not needed if the type is \"Fixture\".\n    myAddFixtureTable.idtype = \"Channel\"\n    -- Set the CID - Use only this when the \"idtype\" is different than Fixture.\n    myAddFixtureTable.cid = \"301\"\n    -- Set the name of the fixture.\n    myAddFixtureTable.name = \"Dimmer 301\"\n    -- Create a patch table with an address.\n    myAddFixtureTable.patch = {\"10.001\"}\n\n    -- Add the fixture to the patch using the table data. Store the result in a local variable.\n    local success = AddFixtures(myAddFixtureTable)\n    \n    -- Provide some feedback.\n    if success ~= nil then\n        Printf(\"Fixture \" .. myAddFixtureTable.fid .. \" is added with patch address \" .. myAddFixtureTable.patch[1])\n    else\n        Printf(\"AddFixture failed!\")\n    end\n    \n    -- Return the command line to the root destination.\n    Cmd(\"ChangeDestination Root\")\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "AddonVars": {
    "prefix": "AddonVars(name)",
    "body": [
      "AddonVars(${1:addonName})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_addonvars.html#h2_873740972 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------\n\nThe **AddonVars** function returns a handle to the set of variables connected to a specific addon.\n\n![](https://help.malighting.com/grandMA3/2.1/Storage/grandma3-user-manual-publication/Client/Content/images/icons/restriction_gray.png)  **Restriction:** \n The addon variable set is not helpful at the moment.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_addonvars.html#h2__615384334 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------\n\n-   **String**:\\\n    The string needs to be the name of the addon.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_addonvars.html#h2__607298120 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The function returns a handle of the set of variables."

    ,
    "examples": {
      "1": {
        "description": "This example prints information connected to the \"Demo\" addon variable set. It uses the Dump() function:"
        
        ,
        "code": "return function()\n    -- Stores the handle to a variable set connected to the addon named 'Demo'.\n    local variableSet = AddonVars(\"Demo\")\n    -- Check if the return is nil and print an error message\n    if variableSet == nil then\n        ErrPrintf(\"The variable set does not exists\")\n        return\n    end\n    Printf(\"=============== START OF DUMP ===============\")\n    variableSet:Dump()\n    Printf(\"================ END OF DUMP ================\")\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "BuildDetails": {
    "prefix": "BuildDetails()",
    "body": [
      "BuildDetails()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_builddetails.html#h2_873740972 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------------\n\nThe BuildDetails function returns a table with key-value pairs about the software build.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_builddetails.html#h2__615384334 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_builddetails.html#h2__607298120 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------\n\n-   **Build details**:\\\n    This is the table with key-value pairs. These are the possible keys in the table:\n    -   **GitDate**: String with the date for the repository branch of the software.\n    -   **GitHead**: String with the branch of the repository.\n    -   **GitHash**: String with the hash for the repository.\n    -   **CompileDate**: String with the date for the compile.\n    -   **CompileTime**: String with the time for the compile.\n    -   **BigVersion**: String indicating the software version.\n    -   **SmallVersion**: String with the small version number of the software. Devices that only listen to a DMX data stream need to have this version to \"understand\" the streaming data.\n    -   **HostType**: String with the host type, for instance, \"Console\" or \"onPC\".\n    -   **HostSubType**: String with the host sub-type, for instance, \"FullSize\" or \"Light\".\n    -   **CodeType**: String showing the type of code, for instance, \"Release\".\n    -   **IsRelease**: Boolean indicating if the software is a release version."
    
    ,
    "examples": {
      "1": {
        "description": "This example prints the content of the BuildDetails table:"
        
        ,
        "code": "return function()\n    --Store the build detials table\n    local myBuild = BuildDetails()\n    --Print the content of the table\n    Printf(\"GitDate: \" .. myBuild.GitDate)\n    Printf(\"GitHead: \" .. myBuild.GitHead)\n    Printf(\"GitHash: \" .. myBuild.GitHash)\n    Printf(\"CompileDate: \" .. myBuild.CompileDate)\n    Printf(\"CompileTime: \" .. myBuild.CompileTime)\n    Printf(\"BigVersion: \" .. myBuild.BigVersion)\n    Printf(\"SmallVersion: \" .. myBuild.SmallVersion)\n    Printf(\"HostType: \" .. myBuild.HostType)\n    Printf(\"HostSubType: \" .. myBuild.HostSubType)\n    Printf(\"CodeType: \" .. myBuild.CodeType)\n    Printf(\"IsRelease: \" .. tostring(myBuild.IsRelease))\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "CheckDMXCollision": {
    "prefix": "CheckDMXCollision(handle, startAddress, count, breakIndex)",
    "body": [
      "CheckDMXCollision(${1:dmxModeHandle}, ${2:startAddress}, ${3:count}, ${4:breakIndex})"
    ],
    "description": "Description\n-----------\n\nThe **CheckDMXCollision** Lua function checks if a specific DMX address range is available or already used.\n\nIt uses the number of DMX channels in a specific \"DMX mode\" of a fixture type to calculate the number of DMX channels that should be available from a specified DMX start address.\n\nAll fixture types have at least one defined DMX mode. But fixtures often have more than one mode. This Lua function uses a specific DMX mode of a fixture type.\n\nArguments\n---------\n\n-   **Handle**:\\\n    The handle must be for a \"DMX mode\". This is used to calculate how many DMX channels should be available in the range.\n-   **String**:\\\n    This must be a DMX address expressed as a string. This defines the start of the range to be checked.\n\n-   **Integer** (optional)|**nil**:\\\n    This optional integer is a count of subsequent \"DMX Modes\" that should also be checked. The default value is **1**.\\\n    For instance, if the provided \"DMX Mode\" uses 10 DMX channels and the count is set to 5, then there must be 50 unpatched DMX channels from the start address for a positive result.\n-   **Integer** (optional):\\\n    This optional integer indicates the break_index. The default value is **0**, which is the first \"DMX break\" defined for the \"DMX mode\". All fixture types have at least one defined \"DMX break\".\n\nReturn\n------\n\n-   **Boolean**:\\\n    The function returns a boolean.\n    -   **True**:\\\n        The DMX address is available as a start address.\n    -   **False**:\\\n        The DMX address is unavailable as a start address for the calculated number of DMX channels."

    ,
    "examples": {
      "1": {
        "description": "This example prints feedback to the DMX collision check based on a DMX address of \"1.001\" and the DMX mode of the first fixture in the current selection:"
        
        ,
        "code": "return function()\n    -- Set the DMX universe - range 1-1024.\n    local myDMXUniverse = 1\n    -- Set the DMX address in the universe - range 1-512.\n    local myDMXAddress = 1\n    -- Set the optional count for the number of fixtures (break_index channel amount) to check.\n    local myCount = 1\n    -- Set the optional break_index number for fixtures with multiple breaks. \n    -- Default value is 0 to indicate the first break.\n    local myBreakIndex = 0\n\n    -- Creates the string used for the DMX address.\n    local startOfRange = string.format(\"%d.%03d\", myDMXUniverse, myDMXAddress)\n\n    -- Check if there is a selection and exit if there isn't.\n    if SelectionFirst() == nil then\n        Printf(\"Please make a selection and try again.\")\n        return\n    end\n    -- This gets the handle for the first fixture a patched generic Dimmers 8-bit mode.\n    local myDmxMode = GetSubfixture(SelectionFirst()).ModeDirect\n\n    if myDmxMode == nil then\n        -- Exit the function if the DMX mode returns nil.\n       \n    else\n        -- Do the actual collision check and provide useful feedback.\n        if CheckDMXCollision(myDmxMode, startOfRange, myCount, myBreakIndex) then\n            Printf(\"The DMX address \" .. startOfRange .. \" is available.\")\n            return\n        else\n            Printf(\"The DMX address \" .. startOfRange .. \" cannot be used as a start address for this patch.\")\n            return\n        end\n    end\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "CheckFIDCollision": {
    "prefix": "CheckFIDCollision(fixtureId, count, type)",
    "body": [
      "CheckFIDCollision(${1:fixtureId}, ${2:count}, ${3:type})"
    ],
    "description": "Description\n-----------\n\nThe **CheckFIDCollision** Lua function checks if a specific (range of) ID is available or already used. It can be used to check FID and any type of CID by adding a type integer.\n\nArguments\n---------\n\n-   **Integer**:\\\n    The first integer is the ID that should be checked.\n-   **Integer** (optional):\\\n    This optional integer is a count of subsequent IDs that should also be checked. The default value is **1**. For instance, if FID 21 to 25 should be checked, then the count integer should be **5**.\n-   **Integer** (optional):\\\n    This optional integer indicates the IDType. The default value is **0**, which is the \"Fixture\" ID Type. See the example below for other valid integers.\n\nReturn\n------\n\n-   **Boolean**:\\\n    The function returns a boolean.\n    -   **True**:\\\n        The ID is available.\n    -   **False**:\\\n        The ID is already used."

    ,
    "examples": {
      "1": {
        "description": "This example prints feedback to the FID check:"
        
        ,
        "code": "return function()\n    -- Create a variable with the FID you want to check.\n    local myFID = 2001\n    -- Create a variable with the number of subsequent ID's to also check.\n    local myCount = 10\n    -- Create a variable with the IDType you want to check.\n    -- Default value is 0. This is the \"Fixture\" type.\n    -- Valid integers are:\n    --- 0 = Fixture\n    --- 1 = Channel\n    --- 2 = Universal\n    --- 3 = Houseligths (default name)\n    --- 4 = NonDim (default name)\n    --- 5 = Media (default name)\n    --- 6 = Fog (default name)\n    --- 7 = Effect (default name)\n    --- 8 = Pyro (default name)\n    --- 9 = MArker\n    --- 10 = Multipatch\n    local myType = 0\n\n    -- Check if the count is more than one.\n    if myCount > 1 then\n        -- Check if there is a collision and print valid feedback.\n        if CheckFIDCollision(myFID, myCount, myType) then\n            Printf(\"The FID \" .. myFID .. \" to \" .. (myFID + myCount) .. \" is available.\")\n            return\n        else\n            Printf(\"The FID \" .. myFID .. \" to \" .. (myFID + myCount) .. \" gives an FID collision.\")\n            return\n        end\n    else\n        if CheckFIDCollision(myFID, nil, myType) then\n            Printf(\"The FID \" .. myFID .. \" is available.\")\n            return\n        else\n            Printf(\"The FID \" .. myFID .. \" gives an FID collision.\")\n            return\n        end\n    end\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "ClassExists": {
    "prefix": "ClassExists(name)",
    "body": [
      "ClassExists(${1:className})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_classexists.html#h2_873740972 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------\n\nThe **ClassExists** Lua function returns a boolean indicating whether the provided string is a class.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_classexists.html#h2__615384334 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------\n\n-   **String**:\\\n    A string containing a single word that could be a class.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_classexists.html#h2__607298120 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------\n\n-   **Boolean**:\\\n    The function returns a boolean.\n    -   **True**:\\\n        The provided word is a class.\n    -   **False**:\\\n        The provided input is not a class."
    
    ,
    "examples": {
      "1": {
        "description": "This example asks if the word \"Display\" is a class and returns proper feedback."
        
        ,
        "code": "return function()\n    -- Store a string with the class name\n    local className = \"Display\"\n    -- Check if the class exists and then provide proper feedback\n    if ClassExists(className) then\n        Printf(\"The class '%s' exists\", className)\n    else\n        Printf(\"The class '%s' does not exists\", className)\n    end\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "CloseAllOverlays": {
    "prefix": "CloseAllOverlays()",
    "body": [
      "CloseAllOverlays()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_closealloverlays.html#h2_873740972 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------------\n\nThe **CloseAllOverlays** function closes any pop-ups or menus (overlays) open on any screen.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_closealloverlays.html#h2__615384334 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_closealloverlays.html#h2__607298120 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not return anything."
    
    ,
    "examples": {
      "1": {
        "description": "This example simply closes any overlay."
        
        ,
        "code": "return function()\n    CloseAllOverlays()\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "CloseUndo": {
    "prefix": "undoHandle(handle)",
    "body": [
      "CloseUndo(${1:handle})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_closeundo.html#h2_873740972 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------\n\nThe **CloseUndo** Lua function closes an open undo list. The function returns a boolean indicating if the function succeeds.\n\nUndo lists need to be created to be closed. See more about this in the [CreateUndo](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_createundo.html) function.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_closeundo.html#h2__615384334 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The handle of a created undo list.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_closeundo.html#h2__607298120 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------\n\n-   **Boolean**:\n    -   True: The undo list was closed.\n    -   False: The undo list is still in use and cannot be closed."
    
    ,
    "examples": {
      "1": {
        "description": "This example creates an undo list, performs a series of commands that are added to the undo list, and closes the undo list. Now the series of commands can be oopsed with one oops command."
        
        ,
        "code": "return function()\n    --Create the undo object \n    local MyNewUndo = CreateUndo(\"MySelection\")\n    --Create command actions connected to the undo object\n    Cmd(\"ClearAll\", MyNewUndo)\n    Cmd(\"Fixture 1\", MyNewUndo)\n    Cmd(\"Fixture 2\", MyNewUndo)\n    Cmd(\"Fixture 5\", MyNewUndo)\n    Cmd(\"Fixture 7\", MyNewUndo)\n    --Close the undo group and store it's return in a variable\n    local closeSuccess = CloseUndo(MyNewUndo)\n    --Print the feedback from the closing action - 1 = Success / 0 = Failure.\n    if closeSuccess == false then\n        ErrPrintf(\"The CloseUndo was not successful\")\n    elseif closeSuccess == true then\n        Printf(\"The CloseUndo was successful\")\n    else\n        Printf(\"The CloseUndo did not return a meaningful result\")\n    end\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "Cmd": {
    "prefix": "Cmd(command, undoHandle)",
    "body": [
      "Cmd(${1:command}, ${2:undoHandle})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_cmd.html#h2_873740972 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------\n\nThe **Cmd** Lua function executes a command in the grandMA3 command line. It is executed in a Lua task - not the Main task (standard typed commands are run in the Main task). It is executed synchronously, and it blocks the Lua task while executing. This means that a bad command has the potential to block the system.\n\nAlternative functions are [CmdIndirect()](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_cmdindirect.html) and [CmdIndirectWait()](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_cmdindirectwait.html).\n\nArgument[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_cmd.html#h2_1267959487 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------\n\n-   **String**:\\\n    A string with the command to be executed in the command line. Do not add a please or enter to execute the command.\n-   **Handle** (optional):\\\n    A handle to an undo (oops) list. Learn more in the [CreateUndo topic](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_createundo.html).\n-   **...** (optional):\\\n    Additional arguments relevant for the command. \n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_cmd.html#h2__607298120 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------\n\n-   **String**:\\\n    A string is returned with the execution feedback known from the command line feedback\n    -   **OK**:\\\n        Command executed.\n    -   **Syntax Error**:\\\n        The command was not executed because of a syntax error.\n    -   **Illegal Command**:\\\n        Command not executed because of some illegal command or action.\n\nThe returned string does not need to be used."
    
    ,
    "examples": {
      "1": {
        "description": "This example executes the command \"ClearAll\" in the command line."
        
        ,
        "code": "return function()\n    --Execute the command directly\n    Cmd(\"ClearAll\")\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "CmdIndirect": {
    "prefix": "CmdIndirect(command, undoHandle, handleTarget)",
    "body": [
      "CmdIndirect(${1:command}, ${2:undoHandle}, ${3:handleTarget})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_cmdindirect.html#h2_873740972 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------\n\nThe **CmdIndirect** Lua function executes a command within the grandMA3 command line. It is executed asynchronously in the Main task. It does not block the Lua execution since it is not executed in the Lua Task.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_cmdindirect.html#h2__615384334 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------\n\n-   **String**:\\\n    A string with the command to be executed in the command line. Do not add a please or enter to execute the command.\n-   **Handle** (optional):\\\n    A handle to an undo (oops) list. Learn more in the [CreateUndo topic](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_createundo.html).\n-   **Handle** (optional):\\\n    This is a handle for the target for the command. The target can be a specific screen. See the example below.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_cmdindirect.html#h2__607298120 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------\n\nThis function does not return anything."
    
    ,
    "examples": {
      "1": {
        "description": "This example prints \"1\" and \"2\" in the Command Line History and let the main task open the Configure Display pop-up on screen 2.\n\n"
        
        ,
        "code": "return function()\n    --Print something\n    Printf(\"1\")\n    --Use the 'CmdIndirect' to open a pop-up\n    CmdIndirect(\"Menu DisplayConfig\", nil, GetDisplayByIndex(2))\n    --Print something else\n    Printf(\"2\")\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "CmdIndirectWait": {
    "prefix": "CmdIndirectWait(command, undoHandle, handleTarget)",
    "body": [
      "CmdIndirectWait(${1:command}, ${2:undoHandle}, ${3:handleTarget})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_cmdindirectwait.html#h2_873740972 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------------\n\nThe **CmdIndirectWait** Lua function executes a command within the grandMA3 command line. It does not block the Lua execution and is executed synchronously in the main task. Synchronous commands wait for the command to be executed before executing any following command.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_cmdindirectwait.html#h2__615384334 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------------\n\n-   **String**:\\\n    A string with the command to be executed in the command line. Do not add a please or enter to execute the command.\n-   **Handle** (optional):\\\n    A handle to an undo (oops) list. Learn more in the [CreateUndo](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_createundo.html) topic.\n-   **Handle** (optional):\\\n    This is a handle for the target for the command. The target can be a specific screen. See the example below.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_cmdindirectwait.html#h2__607298120 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not return anything."
    
    ,
    "examples": {
      "1": {
        "description": "This example prints \"1\" and \"2\" in the Command Line History and lets the main task open the Configure Display pop-up on screen 2.\n\n"
        
        ,
        "code": "return function()\n    --Print something\n    Printf(\"1\")\n    --Use the 'CmdIndirectWait' to open a pop-up\n    CmdIndirectWait(\"Menu DisplayConfig\", nil, GetDisplayByIndex(2))\n    --Print something else\n    Printf(\"2\")\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "CmdObj": {
    "prefix": "CmdObj()",
    "body": [
      "CmdObj()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_cmdobj.html#h2_873740972 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------\n\nThe **CmdObj** Lua function returns information about the command line object.\n\nArgument[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_cmdobj.html#h2_1267959487 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------\n\nThis function does not have any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_cmdobj.html#h2__607298120 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The function returns a handle to the command line object."
    
    ,
    "examples": {
      "1": {
        "description": "This example uses the Dump() function on the command object. It lists all the properties and lists the children and some extra examples of how the command line object can be used:"
        
        ,
        "code": "return function()\n    --Store the handle to the command object\n    local cmd = CmdObj()\n    --Print all information about the command object\n    Printf(\"=============== START OF DUMP ===============\")\n    cmd:Dump()\n    Printf(\"================ END OF DUMP ================\")\n    --Print some selected elements from the command object - this is currently not in the online manual\n    Printf(\"Current text in the command line: \" ..cmd.cmdtext)\n    Printf(\"Current cmd edit object: \" ..tostring(cmd.editobject and cmd.editobject:ToAddr()))\n    Printf(\"Current cmd destination: \" ..tostring(cmd.destination and cmd.destination:ToAddr()))\n    Printf(\"Current user of the command line: \" ..tostring(cmd.user and cmd.user:ToAddr()))\n    Printf(\"Current profile of the command line: \" ..tostring(cmd.profile and cmd.profile:ToAddr()))\n    Printf(\"Current DMX readout: \" ..cmd.dmxreadout)\n    Printf(\"Current amount steps: \" ..cmd.maxstep)\n    Printf(\"Current selected object: \" ..tostring(cmd:GetSelectedObject() and cmd:GetSelectedObject():ToAddr()))\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "ConfigTable": {
    "prefix": "ConfigTable()",
    "body": [
      "ConfigTable()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_configtable.html#h2_873740972 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------\n\nThe **ConfigTable** Lua function returns a table with some configuration information. These are information only. The function does not have any actual functions. The table is not sorted.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_configtable.html#h2__615384334 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_configtable.html#h2__607298120 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------\n\n-   **Table**:\\\n    The returned table contains kay value pairs with configuration information. See the example below."
    
    ,
    "examples": {
      "1": {
        "description": "This example prints the content of the returned table."
        
        ,
        "code": "return function ()\n    -- Prints the content of the ConfigTable\n    for key,value in pairs(ConfigTable()) do\n        Printf(key .. \" : \" .. value)\n    end\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "Confirm": {
    "prefix": "Confirm(title, text, screen, text)",
    "body": [
      "Confirm(${1:title}, ${2:text}, ${3:screen}, ${2:showCancel})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_confirm.html#h2_873740972 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------\n\nThe **Confirm** Lua function provides a simple confirmation pop-up for a true/false query. It is part of the user interface functions.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_confirm.html#h2__615384334 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------\n\n-   **String**:\\\n    This string is the title for the pop-up.\n-   **String** (optional):\\\n    This string is the text in the pop-up.\n-   **Integer** (optional):\\\n    This integer is not used since the pop-up appears on all screens. The value can be *nil*.\n-   **Boolean** (optional):\\\n    This boolean defines if there is a Cancel button in the pop-up or not.\n    -   true: There is a Cancel button in the pop-up. This is the default option used if it is not defined.\n    -   false: There is only an OK button in the pop-up.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_confirm.html#h2__607298120 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------\n\n-   **Boolean**:\n    -   True / 1: The pop-up was confirmed with the OK.\n    -   False / 0: The pop-up was not confirmed with Cancel. This is only a possible option if the Cancel button is visible."
    
    ,
    "examples": {
      "1": {
        "description": "This example creates a confirmation pop-up with printed feedback in the Command Line History:"
        
        ,
        "code": "return function()\n    --Creates a pop-up asking to be confirmed and prints a useful text.\n    if Confirm(\"Confirm me\", \"Tap OK or Cancel\", nil, true) then\n        Printf(\"Pop-up result: OK\")\n    else\n        Printf(\"Pop-up result: Cancel\")\n    end\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "CreateMultiPatch": {
    "prefix": "CreateMultiPatch(fixtureTableHandle, count, undoText)",
    "body": [
      "CreateMultiPatch(${1:fixtureTableHandle}, ${2:multiPatchAmount}, ${3:undoText})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_createmultipatch.html#h2_873740972 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------------\n\nThe **CreateMultiPatch** Lua function creates a series of multi patch fixtures to a table of fixtures.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_createmultipatch.html#h2__615384334 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------------\n\n-   **Table**:\\\n    The table must contain **handles **to the fixtures who should have the multi patch fixtures.\n-   **Integer**:\\\n    The number of multi patch fixtures to create.\n\n-   **String** (optional):\\\n    The string is an optional undo text. It needs to be in quotation marks.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_createmultipatch.html#h2__607298120 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------------\n\n-   **Integer** | **nil**:\\\n    The returned integer indicates the amount of multi patch fixtures created."
    
    ,
    "examples": {
      "1": {
        "description": "This example creates two multi patch fixtures to the first fixture (excluding the \"Universal\" fixture) in the patch."
        
        ,
        "code": "return function()\n    -- Enter Patch.\n    Cmd(\"ChangeDestination Root\");\n    -- Enter the SetupPatch.\n    Cmd(\"ChangeDestination 'ShowData'.'Patch'\");\n\n    -- Get the handle for the first fixture in the patch.\n    local myFixture = Patch().Stages[1].Fixtures[2]\n    -- Add the handle a list element in an table.\n    local myFixtureTable = {myFixture}\n    -- Add a variable with the amount of multipatch fixtures needed.\n    local multiPatchAmount = 2\n\n    -- Count the number of elements in the fixture table and store in a variable.\n    local count = 0\n    for _ in pairs(myFixtureTable) do\n         count = count + 1\n    end\n    -- Create an unto text string.\n    local undoText = string.format(\"Create %d multipatch fixtures for up to %d fixtures\", multiPatchAmount, count)\n\n    -- Create the multipatch fixtures to the each fixture handle in the table and store the returned value.\n    local multiPatchAmount = CreateMultiPatch(myFixtureTable, multiPatchAmount, undoText)\n    if multiPatchAmount ~= nil then\n        Printf(multiPatchAmount .. \" multi patch objects was created\")\n    else\n        Printf(\"An error occured\")\n    end\n\n    -- Return the command line destination to the root.\n    Cmd(\"ChangeDestination Root\")\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "CreateUndo": {
    "prefix": "CreateUndo(undoText)",
    "body": [
      "CreateUndo(${1:undoText})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_createundo.html#h2_873740972 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------\n\nThe **CreateUndo** Lua function returns a handle to a list of commands and function calls grouped in the same oops action.\n\nFunctions can be executed with a reference to the undo handle. This adds the function to the undo list.\n\nUndo lists need to be closed using the [CloseUndo](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_closeundo.html) function.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_createundo.html#h2__615384334 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------\n\n-   **String**:\\\n    A text string must be added. It can be used to identify the undo list.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_createundo.html#h2__607298120 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The function returns the handle to the undo list."
    
    ,
    "examples": {
      "1": {
        "description": "This example creates an undo list, performs a series of commands being added to the undo list, and closes the undo list. Now, the series of commands can be oopsed with one oops command."
        
        ,
        "code": "return function()\n    -- Create the undo group.\n    local MyNewUndo = CreateUndo(\"MySelection\")\n    -- Make some command line actions linked to the undo.\n    Cmd(\"ClearAll\", MyNewUndo)\n    Cmd(\"Fixture 1\", MyNewUndo)\n    Cmd(\"Fixture 2\", MyNewUndo)\n    Cmd(\"Fixture 5\", MyNewUndo)\n    Cmd(\"Fixture 7\", MyNewUndo)\n    -- Closing the undo group and store it's return in a variable.\n    local closeSuccess = CloseUndo(MyNewUndo)\n    -- Print the feedback from the closing action - 1 = Success / 0 = Failure.\n    if closeSuccess == false then\n        ErrPrintf(\"The CloseUndo was not successful\")\n    elseif closeSuccess == true then\n        Printf(\"The CloseUndo was successful\")\n    else\n        Printf(\"The CloseUndo did not return a meaningful result\")\n    end\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "CurrentEnvironment": {
    "prefix": "CurrentEnvironment()",
    "body": [
      "CurrentEnvironment()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_currentenvironment.html#h2_873740972 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------------------\n\nThe **CurrentEnvironment** Lua function returns a handle to the current users' selected environment.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_currentenvironment.html#h2__615384334 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_currentenvironment.html#h2__607298120 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The returned handle to the environment."
    
    ,
    "examples": {
      "1": {
        "description": "This example prints the data connected to the handle. It uses the Dump() function:\n\n"
        
        ,
        "code": "return function()\n    -- Dumps information about the current environment\n    Printf(\"=============== START OF DUMP ===============\")\n    CurrentEnvironment():Dump()\n    Printf(\"================ END OF DUMP ================\")\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "CurrentExecPage": {
    "prefix": "CurrentExecPage()",
    "body": [
      "CurrentExecPage()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_currentexecpage.html#h2_873740972 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------------\n\nThe **CurrentEnvironment** Lua function returns a handle to the current users' selected executor page.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_currentexecpage.html#h2__615384334 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_currentexecpage.html#h2__607298120 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The returned handle to the executor page."
    
    ,
    "examples": {
      "1": {
        "description": "This example prints the data connected to the handle. It uses the Dump() function:"
        
        ,
        "code": "return function()\n    -- Dumps information about the current executor page\n    Printf(\"=============== START OF DUMP ===============\")\n    CurrentExecPage():Dump()\n    Printf(\"================ END OF DUMP ================\")\nend"

      }
    },
    "suffix": ""
    
  },
  "CurrentProfile": {
    "prefix": "CurrentProfile()",
    "body": [
      "CurrentProfile()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_currentprofile.html#h2_873740972 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------------\n\nThe **CurrentProfile** Lua function returns a handle to the current users' profile.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_currentprofile.html#h2__615384334 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_currentprofile.html#h2__607298120 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The returned handle to the user profile."
    
    ,
    "examples": {
      "1": {
        "description": "This example prints the data connected to the handle. It uses the Dump() function:"
        
        ,
        "code": "return function()\n    -- Dumps information about the current executor page\n    Printf(\"=============== START OF DUMP ===============\")\n    CurrentProfile():Dump()\n    Printf(\"================ END OF DUMP ================\")\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "CurrentScreenConfig": {
    "prefix": "CurrentScreenConfig()",
    "body": [
      "CurrentScreenConfig()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_currentscreenconfig.html#h2_873740972 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------------------\n\nThe **CurrentScreenConfig** Lua function returns a handle to the current users' screen configuration.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_currentscreenconfig.html#h2__615384334 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_currentscreenconfig.html#h2__607298120 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The returned handle to the screen configuration."
    
    ,
    "examples": {
      "1": {
        "description": "This example prints the data connected to the handle. It uses the Dump() function:"
        
        ,
        "code": "return function()\n    -- Dumps information about the current screen configuration\n    Printf(\"=============== START OF DUMP ===============\")\n    CurrentScreenConfig():Dump()\n    Printf(\"================ END OF DUMP ================\")\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "CurrentUser": {
    "prefix": "CurrentUser()",
    "body": [
      "CurrentUser()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_currentuser.html#h2_873740972 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------\n\nThe **CurrentUser** Lua function returns a handle to the current user.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_currentuser.html#h2__615384334 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_currentuser.html#h2__607298120 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The returned handle to the user."
    
    ,
    "examples": {
      "1": {
        "description": "This example prints the data connected to the handle. It uses the Dump() function:\n\n"
        
        ,
        "code": "return function()\n    -- Dumps information about the current user\n    Printf(\"=============== START OF DUMP ===============\")\n    CurrentUser():Dump()\n    Printf(\"================ END OF DUMP ================\")\nend"

      }
    },
    "suffix": ""
    
  },
  "DataPool": {
    "prefix": "DataPool()",
    "body": [
      "DataPool()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_datapool.html#h2_873740972 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------\n\nThe **DataPool** Lua function references the currently selected DataPool and is used to read or edit properties within the data pool.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_datapool.html#h2__615384334 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_datapool.html#h2__607298120 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The function returns a handle to the DataPool object."
    ,
    "examples": {
      "1": {
        "description": "This example uses the Dump() function on the data pool object. Dump lists all the properties and lists the children. Finally, the example also prints the name of the first sequence in the data pool.\n\n"
        
        ,
        "code": "return function()\n    -- Dumps information about the datapool object.\n    Printf(\"=============== START OF DUMP ===============\")\n    DataPool():Dump()\n    Printf(\"================ END OF DUMP ================\")\n    -- Prints the name of the first sequence.\n    Printf(\"Name of sequence 1: \" .. DataPool().Sequences[1].Name)\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "DefaultDisplayPositions": {
    "prefix": "DefaultDisplayPositions()",
    "body": [
      "DefaultDisplayPositions()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_defaultdisplaypositions.html#h2_873740972 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------------------\n\nThe **DefaultDisplayPositions** Lua function returns the handle of the conventional default display positions, which contains the first seven screens as children.\n\nFor example, whether the command line, view bar, and encoder/playback bar are displayed.\n\nArgument[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_defaultdisplaypositions.html#h2_1267959487 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not have any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_defaultdisplaypositions.html#h2__607298120 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The function returns a handle to the command line object."
    
    ,
    "examples": {
      "1": {
        "description": "This example prints all the information about display 1 (child 1 of the default displays) using the Dump() function:\n\n"
        
        ,
        "code": "return function()\n    -- Store a handle to display 1 (child 1 of the default displays).\n    local display1 = DefaultDisplayPositions():Children()[1]\n    -- Dumps information about the display.\n    Printf(\"=============== START OF DUMP ===============\")\n    display1:Dump()\n    Printf(\"================ END OF DUMP ================\")\nend"

        ,
        "suffix": ""
        
      },
      "2": {
        "description": "This example toggles the Control Bar for display 1 with the help of the DefaultDisplayPositions object:\n\n"
        
        ,
        "code": "return function()\n    -- Store a handle to display 1 (child 1 of the default displays).\n    local display1 = DefaultDisplayPositions():Children()[1]\n    -- Toggles the 'ShowMainMenu' setting.\n    display1.ShowMainMenu = not display1.ShowMainMenu\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "DelVar": {
    "prefix": "DelVar(handle, name)",
    "body": [
      "DelVar(${1:variableSetHandle}, ${2:variableName})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_delvar.html#h2_873740972 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------\n\nThe **DelVar** Lua function deletes a specific variable in a set of variables. To learn more about the variables in plugins, have a look at the [Variable Functions](https://help.malighting.com/grandMA3/2.1/HTML/lua_variables.html) topic.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_delvar.html#h2__615384334 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The handle of variable set.\n-   **String**:\\\n    The name of the variable. It needs to be in quotation marks.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_delvar.html#h2__607298120 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------\n\n-   **Boolean**:\n    -   True / 1: The variable was deleted.\n    -   False / 0: The variable was not deleted.\n\nIf the variable does not exist, then false is also returned."
    
    ,
    "examples": {
      "1": {
        "description": "This example deletes a variable called \"myUserVar\" in the set of user variables."
        
        ,
        "code": "return function()\n    -- Deletes the variable called 'myUserVar' in the 'UserVars' variable set.\n    local success = DelVar(UserVars(), \"myUserVar\")\n    -- Prints the outcome of the deletion outcome.\n    if success then\n        Printf(\"Variable is deleted.\")\n    else\n        Printf(\"Variable is NOT deleted!\")\n    end\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "DeskLocked": {
    "prefix": "DeskLocked()",
    "body": [
      "DeskLocked()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_desklocked.html#h2_873740972 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------\n\nThe **DeskLocked** Lua function returns a boolean indicating if the station is locked.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_desklocked.html#h2__615384334 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_desklocked.html#h2__607298120 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------\n\n-   **Boolean**:\\\n    The boolean indicates if the station is desk locked or not.\n    -   **True** (or 1): The station is locked.\n    -   **False** (or 0): The station is not locked."
    
    ,
    "examples": {
      "1": {
        "description": "This example prints the boolean number indicating the \"DeskLocked\" status to the Command Line History.\n\n"
        
        ,
        "code": "return function()\n    -- The DeskLocked() return is printed.\n    Printf(\"The desk is locked: \" .. tostring(DeskLocked()))\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "DeviceConfiguration": {
    "prefix": "DeviceConfiguration()",
    "body": [
      "DeviceConfiguration()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_deviceconfiguration.html#h2_873740972 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------------------\n\nThe **DeviceConfiguration** Lua function returns a handle to the DeviceConfiguration object.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_deviceconfiguration.html#h2__615384334 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_deviceconfiguration.html#h2__607298120 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The returned handle to the DeviceConfiguration."
    
    ,
    "examples": {
      "1": {
        "description": "This example prints the data connected to the handle. It uses the Dump() function:\n\n"
        
        ,
        "code": "return function()\n    -- This example dumps all information about the DeviceConfiguration object.\n    Printf(\"=============== START OF DUMP ===============\")\n    DeviceConfiguration():Dump()\n    Printf(\"================ END OF DUMP ================\")\nend"
        
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "DirList": {
    "prefix": "DirList(path, filter)",
    "body": [
      "DirList(${1:path}, ${2:filter})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_dirlist.html#h2_873740972 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------\n\nThe **DirList** Lua function returns a table of files at a specified path. The returned list can be filtered using an optional filter argument.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_dirlist.html#h2__615384334 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------\n\n-   **String**:\\\n    The desired path in a string format.\n-   **String** (optional):\\\n    The optional filter string. The * can be used as a wildcard in the string. See the example below.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_dirlist.html#h2__607298120 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------\n\n-   **Table**:\\\n    The returned table has elements of other tables. Each of these table elements has the following keys:\n\n    -   name: The name of the file. The value of name is returned as a string.\n    -   size: The size of the file in bytes. The value of size is returned as a number.\n    -   time: The timestamp for the file. The value of time is returned as a number."
    
    ,
    "examples": {
      "1": {
        "description": "This example prints the show files in the showfile directory. It uses the GetPath() function."
        
        ,
        "code": "return function ()\n    -- Get the path to the show files.\n    local path = GetPath(Enums.PathType.Showfiles)\n    -- Make a filter to only list .show files.\n    local filter = \"*show\"\n    -- Use the DirList function to get a table of the files.\n    local returnTable = DirList(path, filter)\n\n    -- Print the information of the files in the returned table.\n    for _, value in pairs(returnTable) do\n        Printf(value['name'] .. \" - Size: \" .. value['size'] .. \" bytes - Time: \" .. os.date(\"%c\", value['time']))\n    end\nend"
        
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "DrawPointer": {
    "prefix": "DrawPointer(displayIndex, position, duration)",
    "body": [
      "DrawPointer(${1:displayIndex}, ${2:position}, ${3:duration})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_drawpointer.html#h2_873740972 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------\n\nThe **DrawPointer** function draws a red pointer on the display. There can only be one pointer at a time on each station.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_drawpointer.html#h2__615384334 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------\n\n-   **Integer**:\\\n    This integer is the display index where the pointer should be drawn.\n-   **Table**:\\\n    This key-value table must have 'x' and 'y' keys with values indicating a position on the display. See the example below.\n-   **Integer** (optional):\\\n    This optional integer defines a duration for the pointer in milliseconds. It fades out. If a duration is not set, then it stays visible.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_drawpointer.html#h2__607298120 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------\n\nThis function does not return anything."
    
    ,
    "examples": {
      "1": {
        "description": "This example draws a pointer on display 1 for 5 seconds:\n\n"
        
        ,
        "code": "return function()\n    --Set a display index\n    local displayIndex = 1\n    --Create and set the position in a table\n    local position = {}\n    position.x = 150\n    position.y = 25\n    --Set a 5 seconds duration - in milliseconds\n    local duration = 5000\n    --Draw the actual pointer\n    DrawPointer(displayIndex,position,duration)\nend"
        
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "DumpAllHooks": {
    "prefix": "DumpAllHooks()",
    "body": [
      "DumpAllHooks()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_dumpallhooks.html#h2_873740972 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------------\n\nThe **DumpAllHooks** function prints a list of the hooks in the system. The list is only shown in the [System Monitor](https://help.malighting.com/grandMA3/2.1/HTML/si_system_monitor.html).\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_dumpallhooks.html#h2__615384334 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_dumpallhooks.html#h2__607298120 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------\n\nThe function does not return anything. It does print a list in the system monitor.\n\n![](https://help.malighting.com/grandMA3/2.1/Storage/grandma3-user-manual-publication/Client/Content/images/icons/tip_gray.png)  **Hint:** \nSee also these related functions: [HookObjectChange](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_hookobjectchange.html), [Unhook](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_unhook.html), [UnhookMultiple](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_unhookmultiple.html)."
    
    ,
    "examples": {
      "1": {
        "description": "This example prints the list of hooks in the system monitor."
        
        ,
        "code": "return function()\n    -- Dumps a list of all the hooks in the System Monitor.\n    Printf(\"=============== START OF HOOK DUMP ===============\")\n    DumpAllHooks()\n    Printf(\"================ END OF HOOK DUMP ================\")\nend"
        
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "Echo": {
    "prefix": "Echo(message)",
    "body": [
      "Echo(${1:message})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_echo.html#h2_873740972 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------\n\nThe **Echo** Lua function prints a string in the [System Monitor](https://help.malighting.com/grandMA3/2.1/HTML/si_system_monitor.html).\n\nArgument[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_echo.html#h2_1267959487 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------\n\n-   **String**:\\\n    The string text to be printed to the System Monitor.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_echo.html#h2__607298120 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------\n\nThis function does not return anything."

    ,
    "examples": {
      "1": {
        "description": "This example prints \"Hello World!\" on the System Monitor:"
        
        ,
        "code": "return function()\n    -- Prints 'Hellow World!' in the system monitor in yellow text.\n    Echo(\"Hello World!\")\nend"
        
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "ErrEcho": {
    "prefix": "ErrEcho(message)",
    "body": [
      "ErrEcho(${1:message})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_errecho.html#h2_873740972 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------\n\nThe **ErrEcho** Lua function prints a red error message on the [System Monitor](https://help.malighting.com/grandMA3/2.1/HTML/si_system_monitor.html).\n\nArgument[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_errecho.html#h2_1267959487 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------\n\n-   **String**:\\\n    The string text is to be printed to the System Monitor.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_errecho.html#h2__607298120 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------\n\nThis function does not return anything."
    
    ,
    "examples": {
      "1": {
        "description": "This prints \"This is a red error message!\" on the system monitor:\n\n"
        
        ,
        "code": "return function()\n    -- Prints an error message in the system monitor in red text.\n    ErrEcho(\"This is an error message!\")\nend"
        
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "ErrPrintf": {
    "prefix": "ErrPrintf(message)",
    "body": [
      "ErrPrintf(${1:message})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_errprintf.html#h2_873740972 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------\n\nThe **ErrPrintf** Lua function prints a red error message in the [Command Line History](https://help.malighting.com/grandMA3/2.1/HTML/ws_ui_command_line.html) and [System Monitor](https://help.malighting.com/grandMA3/2.1/HTML/si_system_monitor.html).\n\nArgument[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_errprintf.html#h2_1267959487 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------\n\n-   **String**:\\\n    The string text to be printed to the Command Line History.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_errprintf.html#h2__607298120 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------\n\nThis function does not return anything."
    
    ,
    "examples": {
      "1": {
        "description": "This example prints \"This is a red error message!\" in the Command Line History and System Monitor:\n\n"

        ,
        "code": "return function()\n    -- Prints an error message in the command line feedback in red text.\n    ErrPrintf(\"This is an error message!\")\nend"
        
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "Export": {
    "prefix": "Export(fileName, exportData)",
    "body": [
      "Export(${1:fileName}, ${2:exportData})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_export.html#h2_873740972 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------\n\nThe object-free **Export** Lua function exports a Lua table in XML format.\n\nThis Lua function correlates with the [Import Lua function](https://help.malighting.com/grandMA3/2.1/HTML/lua_object_import.html).\n\nThere is a related object version of [Export](https://help.malighting.com/grandMA3/2.1/HTML/lua_object_export.html).\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_export.html#h2__615384334 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------\n\n-   **Filename**:\\\n    This is a string containing the file name of the exported file. It should contain the file name, including the entire path. See the example below.\n-   **Export_data**:\\\n    This is the data that is going to be exported. It should be a table object.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_export.html#h2__607298120 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------\n\n-   **Boolean**:\\\n    This function returns a boolean.\n    -   **True**:\\\n        The export was a success\n\n    -   **False**:\\\n        The export failed."

    ,
    "examples": {
      "1": {
        "description": "To export the build details table, create a plugin with this code:"

        ,
        "code": "return function()\n    -- 'BuildDetails()' creates a table with information about the software build.\n    local build = BuildDetails()\n    --The path and filename is stored in a variable.\n    local exportPath = GetPath(Enums.PathType.Library) .. \"/BuildDetails.xml\"\n    --The actual export (in xml format) using the path and the table - the result boolean stored in a variable.\n    local success = Export(exportPath, build)\n    --Print feedback about the export path.\n    if success then\n        Printf(\"The export was stored at: \" .. exportPath)\n    else\n        Printf(\"The export failed\")\n    end\nend"
        
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "ExportCSV": {
    "prefix": "ExportCSV(fileName, exportData)",
    "body": [
      "ExportCSV(${1:fileName}, ${2:exportData})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_exportcsv.html#h2_873740972 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------\n\nThe object-free **ExportCSV** Lua function exports a Lua table in CSV format.\n\n![](https://help.malighting.com/grandMA3/2.1/Storage/grandma3-user-manual-publication/Client/Content/images/icons/restriction_gray.png) **Known Limitation:**\nThe output CSV file might not formatted correctly.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_exportcsv.html#h2__615384334 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------\n\n-   **Filename**:\\\n    This is a string containing the file name of the exported file. It should contain the file name, including the entire path. See the example below.\n-   **Export_data**:\\\n    This is the data that is going to be exported. It should be a table object.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_exportcsv.html#h2__607298120 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------\n\n-   **Boolean**:\\\n    This function returns a boolean.\n    -   **True**:\\\n        The export was a success.\n    -   **False**:\\\n        The export failed."
    
    ,
    "examples": {
      "1": {
        "description": "To export the build details table, create a plugin with this code:"

        ,
        "code": "return function()\n    -- 'BuildDetails()' creates a table with information about the software build.\n    local build = BuildDetails()\n    --The path and filename is stored in a variable.\n    local exportPath = GetPath(Enums.PathType.Library) .. \"/BuildDetails.csv\"\n    --The actual export (in csv format) using the path and the table - the result boolean stored in a variable.\n    local success = ExportCSV(exportPath, build)\n    --Print feedback about the export path.\n    if success then\n        Printf(\"The export was stored at: \" .. exportPath)\n    else\n        Printf(\"The export failed.\")\n    end\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "ExportJson": {
    "prefix": "ExportJson(fileName, exportData)",
    "body": [
      "ExportJson(${1:fileName}, ${2:exportData})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_exportjson.html#h2_873740972 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------\n\nThe object-free **ExportJson** Lua function exports a Lua table in JSON format.\n\n![](https://help.malighting.com/grandMA3/2.1/Storage/grandma3-user-manual-publication/Client/Content/images/icons/restriction_gray.png) | **Known Limitation:**\nThe JSON file might not be formatted in proper JSON format.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_exportjson.html#h2__615384334 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------\n\n-   **Filename**:\\\n    This is a string containing the file name of the exported file. It should contain the file name, including the entire path. See the example below.\n-   **Export_data**:\\\n    This is the data that is going to be exported. It should be a table object.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_exportjson.html#h2__607298120 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------\n\n-   **Boolean**:\\\n    This function returns a boolean.\n    -   **True**:\\\n        The export was a success.\n\n    -   **False**:\\\n        The export failed."

    ,
    "examples": {
      "1": {
        "description": "To export the build details table, create a plugin with this code:"

        ,
        "code": "return function()\n\n    -- 'BuildDetails()' creates a table with information about the software build.\n\n    local build = BuildDetails()\n\n    --The path and filename is stored in a variable.\n\n    local exportPath = GetPath(Enums.PathType.Library) .. \"/BuildDetails.json\"\n\n    --The actual export (in JSON format) using the path and the table - the result boolean stored in a variable.\n\n    local success = ExportJson(exportPath, build)\n\n    --Print feedback about the export path.\n\n    if success then\n\n        Printf(\"The export was stored at: \" .. exportPath)\n\n    else\n\n        Printf(\"The export failed.\")\n\n    end\n\nend"
        
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "FileExists": {
    "prefix": "FileExists(fileName)",
    "body": [
      "FileExists(${1:fileName})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_fileexists.html#h2_873740972 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------\n\nThe FileExists Lua function checks if a file exists and returns a boolean with the result.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_fileexists.html#h2__615384334 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------\n\n-   **String**:\\\n    The string must include the path and filename for the file that should be checked.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_fileexists.html#h2__607298120 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------\n\n-   **Boolean**:\n    -   True / 1: The file exists.\n    -   False / 0: The file does not exist."

    ,
    "examples": {
      "1": {
        "description": "This example returns feedback for the first file in the show file folder. The example uses the GetPath() and DirList() functions."

        ,
        "code": "return function ()\n    -- Get the path to the show files.\n    local path = GetPath(Enums.PathType.Showfiles)\n    -- Get a table of files at the path.\n    local dirTable = DirList(path)\n    -- Get the file name for the first file.\n    local firstFile = dirTable[1]['name']\n    -- Create a string with the path and filename.\n    local filepath = string.format(\"%s%s%s\", path, GetPathSeparator(), firstFile)\n\n    -- Check if the file exist and return useful feedback.\n    if FileExists(filepath) then\n        Printf('The file \"' .. firstFile .. '\" exist at path \"' .. path .. '\"')\n    else\n        Printf('The file \"' .. firstFile .. '\" does not exist')\n    end\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "FindTexture": {
    "prefix": "FindTexture(textureName)",
    "body": [
      "FindTexture(${1:textureName})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_findtexture.html#h2_873740972 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------\n\nThe **FindTixture** Lua function returns a handle to the texture matching the input text string - if the texture exists.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_findtexture.html#h2__615384334 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------\n\n-   **String**:\\\n    The text string must be the name of the texture without the file type. See the example below.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_findtexture.html#h2__607298120 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle** | **nil**:\\\n    The function returns the texture handle or nil if it does not exist."

    ,
    "examples": {
      "1": {
        "description": "This example prints the information about the \"button\" texture. The example uses the Dump() function."

        ,
        "code": "return function ()\n    -- Set a texture name.\n    local textureName = \"button\"\n    -- Get the handle of the texture.\n    local textureHandle = FindTexture(textureName)\n    -- Check if textureHandle returned something and provide feedback.\n    if textureHandle == nil then\n        ErrPrintf(\"Texture does not exist.\")\n    else\n        Printf(\"=============== START OF DUMP ===============\")\n        FindTexture(textureName):Dump()\n        Printf(\"================ END OF DUMP ================\")\n    end\nend"
        
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "FirstDmxModeFixture": {
    "prefix": "FirstDmxModeFixture(fixtureDMXMode)",
    "body": [
      "FirstDmxModeFixture(${1:fixtureDMXMode})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_firstdmxmodefixture.html#h2_873740972 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------------------\n\nThe **FirstDmxModeFixture** Lua function returns a handle to the first fixture matching the supplied DMX mode.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_firstdmxmodefixture.html#h2__615384334 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    This must be a handle to a DMX mode.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_firstdmxmodefixture.html#h2__607298120 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The returned handle to the first fixture matching the DMX mode."

    ,
    "examples": {
      "1": {
        "description": "If it exists, this example prints the data connected to the first \"Dimmer\" fixture using \"Mode 0\" - if the fixture type exists in the show. It uses the Dump() functions:"

        ,
        "code": "return function ()\n    -- Get the handle for the Dimmer fixture.\n    local fixtureTypeHandle = Patch().FixtureTypes['Dimmer']\n\n    -- Check if fixture type returned something and provide feedback.\n    if fixtureTypeHandle == nil then\n        ErrPrintf(\"The fixture type does not exist in this show. Try adding it or edit this plugin.\")\n    else\n        -- Get the handle for the DMX mode of a Dimmer fixture.\n        local fixtureDMXMode = fixtureTypeHandle.DMXModes[\"Mode 0\"]\n\n        -- Check if fixtureDMXMode returned something and provide feedback.\n        if fixtureDMXMode == nil then\n            ErrPrintf(\"The fixture type does not contain a 'Mode 0' DMX mode. Try adding it or edit this plugin.\")\n        else\n            -- Dumps information about the first fixture matching the DMX mode.\n            Printf(\"=============== START OF DUMP ===============\")\n            FirstDmxModeFixture(fixtureDMXMode):Dump()\n            Printf(\"================ END OF DUMP ================\")\n        end\n    end\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "FixtureType": {
    "prefix": "FixtureType()",
    "body": [
      "FixtureType()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_fixturetype.html#h2_873740972 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------\n\nThe FixtureType Lua function returns a handle to the fixture type. The function does not accept any arguments, but the function must be executed when the command line destination is at a fixture type. If the command line destination is not a valid fixture type, then the function returns \"nil\".\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_fixturetype.html#h2__615384334 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_fixturetype.html#h2__607298120 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle** or **nil**:\\\n    The handle for the fixture type or nil."

    ,
    "examples": {
      "1": {
        "description": "This example prints the information about the second fixture type in the show:\n\n"

        ,
        "code": "return function ()\n    -- The function returns the handle to the fixture at the current command line destination.\n    -- Change to the \"FixtureType\" destination.\n    Cmd(\"ChangeDestination FixtureType\")\n    -- Change to the second fixture type in the show.\n    Cmd(\"ChangeDestination 2\")\n    -- Dump information about the Fixture Type handle. \n    Printf(\"=============== START OF DUMP ===============\")\n    FixtureType():Dump()\n    Printf(\"================ END OF DUMP ================\")\n    -- Return the command line destination to the Root.\n    Cmd(\"ChangeDestination Root\")\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "FromAddr": {
    "prefix": "FromAddr(objectString, addressHandle)",
    "body": [
      "FromAddr(${1:objectString}, ${2:addressHandle})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_fromaddr.html#h2_873740972 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------\n\nThe **FromAddr** Lua function converts a numbered string address into a handle that can be used in commands.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_fromaddr.html#h2__615384334 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------\n\n-   **String**:\\\n    A text string identifying an object. It can be a numbered or named address.\n-   **Handle** (optional):\\\n    The default is to write the address from the root location. This optional handle can specify a different base location. It still needs to be a base location in the address path from the root to the object.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_fromaddr.html#h2__607298120 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The handle for the addressed object."
    
    ,
    "examples": {
      "1": {
        "description": "This example prints the address of the first sequence:"

        ,
        "code": "return function()\n    -- Converts the string to a handle and store in a variabel.\n    local mySequenceHandle = FromAddr(\"13.13.1.5.1\")\n    -- Converts the handle back to a numbered string and prints it.\n    Printf(\"The address is: \" ..mySequenceHandle:Addr())\n    -- Converts the handle to a named string and prints it.\n    Printf(\"The address is: \" ..mySequenceHandle:AddrNative())\n    \n    -- Store the handle of the selected datapool.\n    local myDataPool = DataPool()\n    -- Prints the address of the selected datapool.\n    Printf(\"The datapool address is: \" ..myDataPool:Addr())\n    \n    --- The follwoing example uses the name of a sequence in the sequence pool. \n    --- Please adjust the \"Default\" name in the next line to match an existing named sequence.\n    -- Finds the address based on the base location and a text string with names.\n    local alsoMySequenceHandle = FromAddr(\"Sequences.Default\", myDataPool)\n    -- Converts the handle back to a numbered string and prints it.\n    Printf(\"The address is: \" ..alsoMySequenceHandle:Addr())\n    -- Converts the handle to a named string and prints it.\n    Printf(\"The address is: \" ..alsoMySequenceHandle:AddrNative())\nend"
        
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "GetApiDescriptor": {
    "prefix": "GetApiDescriptor()",
    "body": [
      "GetApiDescriptor()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getapidescriptor.html#h2_873740972 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------------\n\nThe **GetApiDescriptor** Lua function returns a table with a description of all the object-free Lua functions. These are descriptions only. The function does not have any actual functions. The table is not sorted.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getapidescriptor.html#h2__615384334 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getapidescriptor.html#h2__607298120 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------------\n\n-   **Table**:\\\n    The returned table contains elements with other tables.\n    -   **String**:\\\n        This is the Api function name.\n    -   **String**:\\\n        This is the description of the Api arguments.\n    -   **String**:\\\n        This is the description of the Api returns."
    
    ,
    "examples": {
      "1": {
        "description": "This example prints the content of the returned table."

        ,
        "code": "return function ()\n    -- This returns information about all the Lua \"object-free\" functions.\n    -- GetApiDescriptor() returns a table with all the functions. \n    -- Each table element is another table with the name, argument description, and return description.\n      for key,value in ipairs(GetApiDescriptor()) do\n        if value[1] ~= nil then\n          Printf(\"Api \" .. key .. \" is: \" .. value[1])\n        end\n        if value[2] ~= nil then\n          Printf(\"Arguments: \" .. value[2])\n        end\n        if value[3] ~= nil then\n          Printf(\"Returns: \" .. value[3])\n        end\n        Printf(\"---------------------------------------\")\n      end\n  end"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "GetAttributeByUIChannel": {
    "prefix": "GetAttributeByUIChannel(channelIndex)",
    "body": [
      "GetAttributeByUIChannel(${1:channelIndex})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getattributebyuichannel.html#h2_873740972 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------------------\n\nThe **GetAttributeByUIChannel** Lua function returns the handle to an attribute based on a \"UI Channel Index\". The index number can be found in the [Parameter List](https://help.malighting.com/grandMA3/2.1/HTML/patch_parameter_list.html).\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getattributebyuichannel.html#h2__615384334 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------------------\n\n-   **Integer**:\\\n    The integer is the UI Channel index number.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getattributebyuichannel.html#h2__607298120 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The handle to the attribute connected to the UI Channel."

    ,
    "examples": {
      "1": {
        "description": "This example prints the \"native\" address to the first attribute of the first fixture in the current selection:\n\n"

        ,
        "code": "return function()\n    -- Get a handle to the first fixture in the current selection\n    local fixtureIndex = SelectionFirst()\n    -- Get the UI Channel Index number for the first attribute for the fixture\n    local channelIndex = GetUIChannelIndex(fixtureIndex,0)\n    -- Print the native address for the attribute with the handle\n    Printf(\"The native addr for the attribute is: %s\",GetAttributeByUIChannel(channelIndex):AddrNative())\nend"
        
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "GetAttributeCount": {
    "prefix": "GetAttributeCount()",
    "body": [
      "GetAttributeCount()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getattributecount.html#h2_873740972 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------------\n\nThe **GetAttributeCount** Lua function returns the total number of attribute definitions in the show.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getattributecount.html#h2__615384334 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getattributecount.html#h2__607298120 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------------\n\n-   **Integer**:\\\n    The returned integer number represents the total amount of attribute definitions in the show file."

    ,
    "examples": {
      "1": {
        "description": "This example prints the returned number in the Command Line History.\n\n"

        ,
        "code": "return function()\n    Printf(\"Attribute count is %i\", GetAttributeCount())\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "GetAttributeIndex": {
    "prefix": "GetAttributeIndex(attributeName)",
    "body": [
      "GetAttributeIndex(${1:attributeName})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getattributeindex.html#h2_873740972 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------------\n\nThe **GetAttributeIndex** Lua function returns the (0 based) index number of the attribute definition based on the system name of the attribute.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getattributeindex.html#h2__615384334 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------------\n\n-   **String**:\\\n    The string text of the attribute system name.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getattributeindex.html#h2__607298120 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------------\n\n-   **Integer**:\\\n    The returned integer number represents the total amount of patched fixtures on all the stages in the show file."
    
    ,
    "examples": {
      "1": {
        "description": "This example prints the index number of the attribute in Command Line History if it exists:"

        ,
        "code": "return function()\n    -- store the returned index or nil of \"Gobo1\"\n    local attributeIndex = GetAttributeIndex(\"Gobo1\")\n    -- Check if the returned value is not nil and print a useful feedback\n    if attributeIndex~=nil then\n        Printf(\"Attribute is index number %i\", attributeIndex)\n    else\n        Printf(\"The attribute is not found\")\n    end\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "GetButton": {
    "prefix": "GetButton(Ma3ModuleHandle)",
    "body": [
      "GetButton(${1:Ma3ModuleHandle})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getbutton.html#h2_873740972 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------\n\nThe **GetButton** Lua function returns a key-value pairs table indicating, with a boolean value, whether a button is pressed on an MA3Module.\n\nBelow the example is a table listing all the grandMA3 hardware modules and which index number matches which button on the hardware module.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getbutton.html#h2__615384334 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle:**\\\n    The handle for the MA3 module.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getbutton.html#h2__607298120 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------\n\n-   **Table**:\\\n    The returned table is a key-value pairs table with a set of 512 pairs with a boolean value. A **true** boolean value indicates that the button is pressed or the fader is touched. The table key is 1-indexed."
    
    ,
    "examples": {
      "1": {
        "description": "This example requests the buttons states on the master module on a grandMA3 full-size console:\n\n"

        ,
        "code": "return function()\n    --- grandMA3 full-size modules are:\n    --- Master Module (MM): \"UsbDeviceMA3 2\"\n    --- Fader Module Encoder (MFE): \"UsbDeviceMA3 3\"\n    --- Fader Module Crossfader (MFX): \"UsbDeviceMA3 4\"\n\n    -- Get a handle to the Master Module on a grandMA3 full-size.\n    local usbDeviceHandle = Root().UsbNotifier.MA3Modules[\"UsbDeviceMA3 2\"]\n    -- Create a table with the button status.\n    local buttonTable = GetButton(usbDeviceHandle)\n    -- Check if the table is nil and then print an error.\n    if buttonTable == nil then\n        ErrPrintf(\"nil\")\n        return\n    end\n    -- If the table is not nil, then print a usefull feedback about pressed buttons. \n    for key,value in pairs(buttonTable) do\n        if tostring(value) == \"true\" then\n            Printf(\"The button with the index \" .. key .. \" is pressed.\")\n        end\n    end\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "GetChannelFunction": {
    "prefix": "GetChannelFunction(channelIndex, attributeIndex)",
    "body": [
      "GetChannelFunction(${1:channelIndex}, ${2:attributeIndex})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getchannelfunction.html#h2_873740972 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------------------\n\nThe **GetChannelFunction** Lua function returns a handle to a channel function based on two index inputs.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getchannelfunction.html#h2__615384334 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------------\n\n-   **Integer**:\\\n    The first integer is a UI Channel Index. This can be found in the [Parameter List](https://help.malighting.com/grandMA3/2.1/HTML/patch_parameter_list.html) or by the [GetUIChannelIndex()](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getuichannelindex.html) Lua function.\n-   **Integer**:\\\n    This integer is an Attribute Index (0-based). This can be found in the [Attribute Definitions](https://help.malighting.com/grandMA3/2.1/HTML/patch_attribute_definitions.html) or by the [GetAttributeIndex()](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getattributeindex.html) Lua function.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getchannelfunction.html#h2__607298120 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The returned handle to the channel function."

    ,
    "examples": {
      "1": {
        "description": "This example prints the data connected to the handle. It uses the Dump() function:"

        ,
        "code": "return function()\n    -- Select the first fixture in the current selection.\n    local subfixtureIndex = SelectionFirst()\n    -- End the function if there is no selection.\n    if subfixtureIndex == nil then\n        ErrPrintf(\"Please select a fixture with a Dimmer\")\n        return\n    end\n    -- Get the Attribute index and UIChannel index.\n    local attributeIndex = GetAttributeIndex(\"Dimmer\")\n    local uiChannelIndex = GetUIChannelIndex(subfixtureIndex,attributeIndex)\n    Printf(\"The UIChannel Index is: %i. The Attribute Index is: %i. \",uiChannelIndex, attributeIndex)\n    -- End the function if any of the index return nil.\n    if (attributeIndex == nil or uiChannelIndex == nil) then\n        ErrPrintf(\"Something wrong happened, maybe your first selected fixture don't have a Dimmer - Please try again\")\n        return\n    end\n    -- The following prints the dump for the dimmer channel function.\n    Printf(\"=============== START OF DUMP ===============\")\n    GetChannelFunction(uiChannelIndex,attributeIndex):Dump()\n    Printf(\"================ END OF DUMP ================\")\nend"
        
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "GetChannelFunctionIndex": {
    "prefix": "GetChannelFunctionIndex(channelIndex, attributeIndex)",
    "body": [
      "GetChannelFunctionIndex(${1:channelIndex}, ${2:attributeIndex})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getchannelfunctionindex.html#h2_873740972 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------------------\n\nThe **GetChannelFunctionIndex** Lua function returns the integer matching a channel function based on two index inputs.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getchannelfunctionindex.html#h2__615384334 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------------------\n\n-   **Integer**:\\\n    The first integer is a UI Channel Index. This can be found in the [Parameter List](https://help.malighting.com/grandMA3/2.1/HTML/patch_parameter_list.html) or by the [GetUIChannelIndex()](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getuichannelindex.html) Lua function.\n-   **Integer**:\\\n    This integer is an Attribute Index (0-based). This can be found in the [Attribute Definitions](https://help.malighting.com/grandMA3/2.1/HTML/patch_attribute_definitions.html) or by the [GetAttributeIndex()](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getattributeindex.html) Lua function.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getchannelfunctionindex.html#h2__607298120 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------------------\n\n-   **Integer**:\\\n    The returned integer to a channel function."

    ,
    "examples": {
      "1": {
        "description": "This example prints the indexes based on the fixture selection and the \"Dimmer\" attribute."

        ,
        "code": "return function()\n    -- Get the Attribute index and UIChannel index.\n    local attributeIndex = GetAttributeIndex(\"Dimmer\")\n    local uiChannelIndex = GetUIChannelIndex(SelectionFirst(),attributeIndex)\n    -- End the function if any of the index return nil.\n    if (attributeIndex == nil or uiChannelIndex == nil) then\n        ErrPrintf(\"Something wrong happened, maybe your first selected fixture don't have a Dimmer - Please try again\")\n        return\n    end\n    -- Get the Channel Function Index and store it in a variable.\n    local channelFunctionIndex = GetChannelFunctionIndex(uiChannelIndex,attributeIndex)\n    Printf(\"The UIChannel Index is: %i. The Attribute Index is: %i. The Channel Function Index is: %i\", uiChannelIndex, attributeIndex, channelFunctionIndex)\nend"
        
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "GetClassDerivationLevel": {
    "prefix": "GetClassDerivationLevel(className)",
    "body": [
      "GetClassDerivationLevel(${1:className})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getclassderivationlevel.html#h2_873740972 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------------------\n\nThe **GetClassDerivationLevel** Lua function returns an integer indicating the derivation level index for a class based on a class name.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getclassderivationlevel.html#h2__615384334 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------------------\n\n-   **String**:\\\n    This string needs to be the name of a class.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getclassderivationlevel.html#h2__607298120 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------------------\n\n-   **Integer**:\\\n    The returned integer indicates the class derivation level."

    ,
    "examples": {
      "1": {
        "description": "This example prints the index integer for the Pool class in the Command Line History:"
        
        ,
        "code": "return function()\n    -- Get the index integer for the \"Pool\" class.\n    local classDerivationLevel = GetClassDerivationLevel(\"Pool\")\n    -- Create a valid Printf return.\n    if classDerivationLevel == nil then\n        Printf(\"The return is nil\")\n    else\n        Printf(\"The ClassDerivationLevel index for 'Pool' is: %i\", classDerivationLevel)\n    end\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "GetCurrentCue": {
    "prefix": "GetCurrentCue()",
    "body": [
      "GetCurrentCue()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getcurrentcue.html#h2_873740972 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------------\n\nThe **GetCurrentCue** Lua function returns a handle to the last activated cue in the selected sequence.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getcurrentcue.html#h2__615384334 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getcurrentcue.html#h2__607298120 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The returned handle to the cue."

    ,
    "examples": {
      "1": {
        "description": "This example prints the data connected to the handle. It uses the Dump() function:"

        ,
        "code": "return function()\n    -- Dumps information about the last activated cue in the selected sequence\n    Printf(\"=============== START OF DUMP ===============\")\n    GetCurrentCue():Dump()\n    Printf(\"================ END OF DUMP ================\")\nend"
        
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "GetDebugFPS": {
    "prefix": "GetDebugFPS()",
    "body": [
      "GetDebugFPS()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getdebugfps.html#h2_873740972 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------\n\nThe **GetDebugFPS** Lua function returns a float number with the frames per second.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getdebugfps.html#h2__615384334 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getdebugfps.html#h2__607298120 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------\n\n-   **Number**:\\\n    The returned number indicates the current frames per second."
    
    ,
    "examples": {
      "1": {
        "description": "This example prints the FPS number:"

        ,
        "code": "return function ()\n    -- Prints the current frames per second.\n    Printf(\"Current FPS: \" .. GetDebugFPS())\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "GetDisplayByIndex": {
    "prefix": "GetDisplayByIndex(displayIndex)",
    "body": [
      "GetDisplayByIndex(${1:displayIndex})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getdisplaybyindex.html#h2_873740972 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------------\n\nThe **GetDisplayByIndex** Lua function returns a handle to the display object matching the provided index number.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getdisplaybyindex.html#h2__615384334 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------------\n\n-   **Integer**:\\\n    This function needs an index number for one of the displays.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getdisplaybyindex.html#h2__607298120 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The returned handle to the display object."

    ,
    "examples": {
      "1": {
        "description": "This example prints the data connected to the handle. It uses the Dump() function:"
        
        ,
        "code": "return function()\n    -- Get the index number for \"Display 1\"\n    local displayIndex = GetDisplayCollect()[\"Display 1\"].INDEX\n    -- return error text in case the index number is nil\n    if displayIndex == nil then\n        ErrPrintf('Something went wrong. It appears that there is no \"display 1\"')\n        return\n    end\n    -- Dump all information about the display with the index number\n    Printf(\"=============== START OF DUMP ===============\")\n    GetDisplayByIndex(displayIndex):Dump()\n    Printf(\"================ END OF DUMP ================\")\nend"

        ,
        "suffix": "![](https://help.malighting.com/grandMA3/2.1/Storage/grandma3-user-manual-publication/Client/Content/images/icons/tip_gray.png) \n **Hint:** \n\nThe example uses the GetDisplayCollect() function to get the index number. The displays are children of the Display Collect, and this function can be used to access the same information using:\n\nGetDisplayCollect()[\"Display 1\"]"

      }
    },
    "suffix": ""
    
  },
  "GetDisplayCollect": {
    "prefix": "GetDisplayCollect()",
    "body": [
      "GetDisplayCollect()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getdisplaycollect.html#h2_873740972 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------------\n\nThe **GetDisplayCollect** Lua function returns a handle to the DisplayCollect object.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getdisplaycollect.html#h2__615384334 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getdisplaycollect.html#h2__607298120 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The returned handle to the DisplayCollect."

    ,
    "examples": {
      "1": {
        "description": "This example prints the data connected to the handle. It uses the Dump() function:"

        ,
        "code": "return function()\n    -- This example dumps all information about the DisplayCollect object.\n    Printf(\"=============== START OF DUMP ===============\")\n    GetDisplayCollect():Dump()\n    Printf(\"================ END OF DUMP ================\")\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "GetDMXUniverse": {
    "prefix": "GetDMXUniverse(universe, isPercent)",
    "body": [
      "GetDMXUniverse(${1:universe}, ${2:isPercent})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getdmxuniverse.html#h2_873740972 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------------\n\nThe **GetDMXUniverse** Lua function returns a table with the DMX channels and their current value.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getdmxuniverse.html#h2__615384334 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------------\n\n-   **Integer**:\\\n    The integer is the universe number. The valid range is 1 to 1024.\n-   **Boolean** (optional):\\\n    The boolean indicates if the returned value is in percent or DMX value.\n    -   True:\\\n        The returned value is in percent. The range is 0 to 100.\n    -   False:\\\n        The returned value is in DMX value. The range is 0 to 255.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getdmxuniverse.html#h2__607298120 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------\n\n-   **Table**:\\\n    The returned table lists all the DMX addresses and the corresponding values.\n\n-- OR --\n\n-   **Nil**:\\\n    Nil is returned if the universe is not granted or the input value is out of range."

    ,
    "examples": {
      "1": {
        "description": "This example prints the table in a list for DMX universe 1 (if it is granted):"
        
        ,
        "code": "return function()\n    -- This gets a table for universe 1 with the returned value in percent.\n    local tableDMXUniverse = GetDMXUniverse(1,true)\n    -- Check the returned table and print information if nil.\n    if tableDMXUniverse == nil then\n        Printf(\"No value is returned. The univer is not granted or input is out of range\")\n        return\n    end\n    -- Prints the table if not nil.\n    for addr, value in ipairs(tableDMXUniverse) do\n        Printf(\"DMX Addr: %i - DMX value : %i\", addr, value)\n    end\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "GetDMXValue": {
    "prefix": "GetDMXValue(address, universe, returnPercent)",
    "body": [
      "GetDMXValue(${1:address}, ${2:universe}, ${3:returnPercent})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getdmxvalue.html#h2_873740972 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------\n\nThe **GetDMXValue** Lua function returns a number indicating the DMX value of a specified DMX address.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getdmxvalue.html#h2__615384334 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------\n\n-   **Integer**:\\\n    The integer is the DMX address. This value should be from 1 to 512 if a universe integer is provided. If a universe is not provided, this should be the absolute DMX address ranging from 1 to 524 288.\n-   **Integer** (optional):\\\n    The integer is the universe number.\n-   **Boolean** (optional):\\\n    The boolean indicates if the returned value is in percent or DMX value.\n    -   True:\\\n        The returned value is in percent. The range is 0 to 100.\n    -   False:\\\n        The returned value is in DMX value. The range is 0 to 255.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getdmxvalue.html#h2__607298120 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------\n\n-   **Integer** or **nil**:\\\n    The returned integer value corresponds with the value of the selected DMX address or nil if the DMX address is not granted."
    
    ,
    "examples": {
      "1": {
        "description": "This example prints the value for DMX address 1 in Universe 4 (if it is granted):"

        ,
        "code": "return function()\n    -- This prints the value of DMX address 1 in universe 4 in a range of 0 to 255\n    local address = 1       -- The DMX address\n    local universe = 4      -- The DMX universe\n    local percent = false   -- Readout in percent or DMX value\n    local value = GetDMXValue(address, universe, percent)\n    Printf(\"DMX address %i.%03d is %03d\", universe, address, value)\nend"
        
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "GetExecutor": {
    "prefix": "GetExecutor(executorNumber)",
    "body": [
      "GetExecutor(${1:executorNumber})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getexecutor.html#h2_873740972 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------\n\nThe **GetExecutor** Lua function returns the handles of the executor and the page based on the executor number.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getexecutor.html#h2__615384334 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------\n\n-   **Integer**:\\\n    The integer number for the executor.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getexecutor.html#h2__607298120 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle - Executor**:\\\n    The returned handle to the executor.\n-   **Handle - Page**:\\\n    The returned handle to the page."

    ,
    "examples": {
      "1": {
        "description": "This example stores the handles for executor number 201. It then uses the Dump() function to show the data for the two handles."

        ,
        "code": "return function ()\n    -- This saves the handles for executor 201 on the selected page.\n    local executorHandle, pageHandle = GetExecutor(201)\n    -- exit the function and print an error message if any of the handles are nil.\n    if executorHandle == nil or pageHandle == nil then\n        ErrPrintf(\"There is not a valid object on executor 201, please assign something and try again.\")\n        return\n    end\n    -- The following prints the dumps of the two handles.\n    Printf(\"============ START OF EXEC DUMP =============\")\n    executorHandle:Dump()\n    Printf(\"================ END OF DUMP ================\")\n    Printf(\"============ START OF PAGE DUMP =============\")\n    pageHandle:Dump()\n    Printf(\"================ END OF DUMP ================\")\nend"
        
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "GetFocus": {
    "prefix": "GetFocus()",
    "body": [
      "GetFocus()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getfocus.html#h2_873740972 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------\n\nThe **GetFocus** Lua function returns a handle to the object that currently has focus in the UI.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getfocus.html#h2__615384334 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getfocus.html#h2__607298120 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The returned handle to the object."

    ,
    "examples": {
      "1": {
        "description": "This example prints the data connected to the handle. It uses the Dump() function:"

        ,
        "code": "return function()\n    -- This example dumps all information about the object who currently got focus.\n    Printf(\"=============== START OF DUMP ===============\")\n    GetFocus():Dump()\n    Printf(\"================ END OF DUMP ================\")\nend"
        
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "GetFocusDisplay": {
    "prefix": "GetFocusDisplay()",
    "body": [
      "GetFocusDisplay()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getfocusdisplay.html#h2_873740972 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------------\n\nThe **GetFocusDisplay** Lua function returns a handle to the display object that currently has focus in the UI.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getfocusdisplay.html#h2__615384334 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getfocusdisplay.html#h2__607298120 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The returned handle to the display object."
    ,
    "examples": {
      "1": {
        "description": "This example prints the data connected to the handle. It uses the Dump() function:"

        ,
        "code": "return function()\n    -- This example dumps all information about the display object who currently got focus.\n    Printf(\"=============== START OF DUMP ===============\")\n    GetFocusDisplay():Dump()\n    Printf(\"================ END OF DUMP ================\")\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "GetObjApiDescriptor": {
    "prefix": "GetObjApiDescriptor()",
    "body": [
      "GetObjApiDescriptor()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getobjapidescriptor.html#h2_873740972 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------------------\n\nThe **GetObjApiDescriptor** Lua function returns a table with a description of all the object Lua functions. These are descriptions only. The function does not have any actual functions. The table is not sorted.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getobjapidescriptor.html#h2__615384334 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getobjapidescriptor.html#h2__607298120 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------------\n\n-   **Table**:\\\n    The returned table contains elements with three values.\n    -   **String**:\\\n        This is the API function name.\n    -   **String**:\\\n        This is the description of the API arguments.\n    -   **String**:\\\n        This is the description of the API returns."

    ,
    "examples": {
      "1": {
        "description": "This example prints the content of the returned table."

        ,
        "code": "return function ()\n  -- This returns information about all the Lua \"object\" functions.\n  -- GetObjApiDescriptor() returns a table with all the functions. \n  -- Each table element is another table with the name, argument description, and return description.\n    for key,value in ipairs(GetObjApiDescriptor()) do\n      if value[1] ~= nil then\n        Printf(\"Api \" .. key .. \" is: \" .. value[1])\n      end\n      if value[2] ~= nil then\n        Printf(\"Arguments: \" .. value[2])\n      end\n      if value[3] ~= nil then\n        Printf(\"Returns: \" .. value[3])\n      end\n      Printf(\"---------------------------------------\")\n      end\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "GetPath": {
    "prefix": "GetPath(folderNameOrIndex, createIfNotExist)",
    "body": [
      "GetPath(${1:folderNameOrIndex}, ${2:createIfNotExist})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getpath.html#h2_873740972 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------\n\nThe **GetPath** Lua function returns a string with the path of a grandMA3 folder.\n\nThe function has two possible argument types - use one of them with each function call.\n\nArgument[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getpath.html#h2_1267959487 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------\n\n-   **String**:\\\n    A text string with the folder name.\n-   **Boolean** (optional with string):\\\n    If this boolean is true, then the folder at the path is created if it does not exist.\n\n\\- OR -\n\n-   **Integer**:\\\n    An integer identifying an index in the \"Enum.PathType\" table.\n\n![](https://help.malighting.com/grandMA3/2.1/Storage/grandma3-user-manual-publication/Client/Content/images/icons/restriction_gray.png) **Restriction:**\nFolder creation only works with string arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getpath.html#h2__607298120 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------\n\n-   **String**:\\\n    The returned string is the *first found* full path related to the provided argument."
    
    ,
    "examples": {
      "1": {
        "description": "This example prints the paths of the show folder on the system monitor twice. It demonstrates the two different input types:\n\n"

        ,
        "code": "return function()\n    -- This prints a path based on a string input and it creates the folder if it does not exists.\n    Printf(\"Path of show files (string) is: \" .. GetPath(\"shows\", true))\n    -- This prints the path based on an integer. The integer is looked-up using the 'PathType' enum.\n    Printf(\"Path of show files (integer) is: \" .. GetPath(Enums.PathType.Showfiles))\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "GetPathOverrideFor": {
    "prefix": "GetPathOverrideFor(folderNameOrIndex, basePath, createIfNotExist)",
    "body": [
      "GetPathOverrideFor(${1:folderNameOrIndex}, ${2:basePath}, ${3:createIfNotExist})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getpathoverridefor.html#h2_873740972 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------------------\n\nThe **GetPathOverrideFor** Lua function delivers a string with the path of a grandMA3 folder. The function is relevant when the path should be on a removable drive connected to a console.\n\nArgument[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getpathoverridefor.html#h2_1267959487 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------------\n\n-   **String**:\\\n    A text string with the folder name.\n-   **String**:\\\n    The base path in a string format.\n\n-   **Boolean** (optional with string):\\\n    If this boolean is true, then the folder at the path is created if it does not exist.\n\n\\- OR -\n\n-   **Integer**:\\\n    An integer identifying an index in the \"Enum.PathType\" table.\n-   **String**:\\\n    The base path in a string format.\n\n-   **Boolean**:\\\n    If this boolean is true, then the folder at the path is created if it does not exist.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getpathoverridefor.html#h2__607298120 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------------\n\n-   **String**:\\\n    The returned string is the *first found* full path related to the provided argument."

    ,
    "examples": {
      "1": {
        "description": "This example prints the override path of the macro folder on the system monitor. It should be run on a console with a removable drive connected.\n"

        ,
        "code": "return function ()\n    -- Set a path for the first removable media.\n    -- Set the initial value to nil.\n    local myBasePath = nil\n    -- Itereate the drives and find the first 'Removeable' drive and store the path.\n    for _, value in ipairs(Root().Temp.DriveCollect) do\n        local driveType = value.drivetype\n        if driveType == \"Removeable\" then\n            myBasePath = value.path\n            break\n        end\n    end\n    -- If no removeable drive was found, then provide feedback and exit the function.\n    if myBasePath == nil then\n        ErrPrintf(\"No removeable drive could be found. Please insert one and try again\")\n        return\n    end\n\n    -- Get the integer for the UserMacros path type.\n    local myPathType = Enums.PathType.UserMacros\n\n    -- Gey the string for the path override.\n    local myOverridePath = GetPathOverrideFor(myPathType, myBasePath)\n    -- Print the returned string.\n    Printf(\"The path is: \" .. myOverridePath)\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "GetPathSeparator": {
    "prefix": "GetPathSeparator()",
    "body": [
      "GetPathSeparator()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getpathseparater.html#h2_873740972 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------------\n\nThe **GetPathSeparator** function returns a string with the path separator for the operating system.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getpathseparater.html#h2__615384334 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getpathseparater.html#h2__607298120 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------------\n\n-   **String**:\\\n    The string is a single character indicating the path se"

    ,
    "examples": {
      "1": {
        "description": "This example prints the path separator:"

        ,
        "code": "return function()\n    --- This prints the path seperator. It is different between a Linux and macOS (/) and a Windows (\\) operating system.\n    Printf(\"The path seperator is \" .. GetPathSeparator())\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "GetPathType": {
    "prefix": "GetPathType(objectHandle, pathContentType)",
    "body": [
      "GetPathType(${1:objectHandle}, ${2:pathContentType})"
    ],
    "description": "Description\n-----------\n\nThe **GetPathType** Lua function returns a string with a name for the path type. This function can be useful when importing objects.\n\nArgument\n--------\n\n-   **Handle**:\\\n    The handle should match the object type for which the path type is needed.\n-   **Integer** (optional):\\\n    The optional integer can be used to specify if the returned string should match the user path type or the system path type. See the example below.\\\n    The Enums.PathContentType can be used, or just use **0** for the system path and **1** for the user path.\n\nReturn\n------\n\n-   **String**:\\\n    The returned string is the name of the path type."

    ,
    "examples": {
      "1": {
        "description": "This example prints the path type name for the first macro object - if it exists:"

        ,
        "code": "return function ()\n    -- Get a handle to the first Macro.\n    local myMacro = DataPool().Macros[1]\n    if myMacro == nil then\n        ErrPrintf(\"An error occurred, possibly because the first macro does not exist.\")\n        ErrPrintf(\"Please create one and try again.\")\n        return\n    end\n    -- Get the user name of the path type.\n    local myPathTypeNameUser = GetPathType(myMacro, Enums.PathContentType.User)\n    if myPathTypeNameUser ~= nil then\n        Printf(\"The user name of the path type is: \" .. myPathTypeNameUser)\n    else\n        ErrPrintf(\"There was an error getting the path type.\")\n    end\n\n    -- Get the system name of the path type.\n    local myPathTypeNameSystem = GetPathType(myMacro, Enums.PathContentType.System)\n    if myPathTypeNameSystem ~= nil then\n        Printf(\"The system name of the path type is: \" .. myPathTypeNameSystem)\n    else\n        ErrPrintf(\"There was an error getting the path type.\")\n    end\nend"
        
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "GetRTChannel": {
    "prefix": "GetRTChannel(rtChannelIndex)",
    "body": [
      "GetRTChannel(${1:rtChannelIndex})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getrtchannel.html#h2_873740972 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------------\n\nThe **GetRTChannel** Lua function returns a table with information about the related RT Channel.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getrtchannel.html#h2__615384334 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------\n\n-   **Integer**:\\\n    The integer should be the index number for an RT Channel.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getrtchannel.html#h2__607298120 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------\n\n-   **Table**:\\\n    The returned table contains related numbers, tables, and handles with a named identifying key:\n    -   handle \"fixture\"\n    -   handle \"subfixture\"\n    -   handle \"dmx_channel\n    -   integer \"dmx_default\"\n    -   integer \"dmx_highlight\"\n    -   integer \"dmx_lowlight\"\n    -   integer \"ui_index_first\"\n    -   integer \"rt_index\"\n    -   integer \"freq\"\n    -   table \"info\"\n    -   table \"patch\""

    ,
    "examples": {
      "1": {
        "description": "This example prints all information related to the first RT Channel for the first fixture in the selection:"

        ,
        "code": "return function()\n    -- Get the index number for the first RT Channel for the first fixture in the current selection \n    local channelRTIndex = GetRTChannels(SelectionFirst())[1]\n    -- Print an error message if returnd index is nil\n    if channelRTIndex == nil then\n        ErrPrintf(\"Please select a fixture and try again\")\n        return\n    end\n    -- Print all information about the RT Channel if it does not return nil\n    local rtChannel = GetRTChannel(channelRTIndex)\n    if rtChannel == nil then\n        Printf(\"An RTChannel could not be found. Please try to selct a different fixture and try again.\")\n        return\n    end\n    Printf(\"================= RT CHANNEL =================\")\n    Printf(\"ui_index_first = \" .. rtChannel[\"ui_index_first\"])\n    Printf(\"dmx_lowlight = \" .. rtChannel[\"dmx_lowlight\"])\n    Printf(\"dmx_highlight = \" .. rtChannel[\"dmx_highlight\"])\n    Printf(\"dmx_default = \" .. rtChannel[\"dmx_default\"])\n    Printf(\"freq = \" .. rtChannel[\"freq\"])\n    Printf(\"rt_index = \" .. rtChannel[\"rt_index\"])\n    Printf(\"========== RELATED DMX CHANNEL DUMP ==========\")\n    rtChannel[\"dmx_channel\"]:Dump() -- Handle for relevant DMX channel\n    Printf(\"============ RELATED FIXTURE DUMP ============\")\n    rtChannel[\"fixture\"]:Dump() -- Handle for relevant fixture\n    Printf(\"========== RELATED SUBFIXTURE DUMP ===========\")\n    rtChannel[\"subfixture\"]:Dump() -- Handle for relevant subfixture\n    Printf(\"=================== INFO =====================\")\n    Printf(\"normed_phaser_time = \" .. rtChannel[\"info\"][\"normed_phaser_time\"])\n    Printf(\"================ INFO FLAGS ==================\")\n    Printf(\"group_master = \" .. rtChannel[\"info\"][\"flags\"][\"group_master\"])\n    Printf(\"additive_master = \" .. rtChannel[\"info\"][\"flags\"][\"additive_master\"])\n    Printf(\"solo = \" .. rtChannel[\"info\"][\"flags\"][\"solo\"])\n    Printf(\"highlight = \" .. rtChannel[\"info\"][\"flags\"][\"highlight\"])\n    Printf(\"lowlight = \" .. rtChannel[\"info\"][\"flags\"][\"lowlight\"])\n    Printf(\"=================== PATCH ====================\")\n    Printf(\"break = \" .. rtChannel[\"patch\"][\"break\"])\n    Printf(\"coarse = \" .. rtChannel[\"patch\"][\"coarse\"])\n    Printf(\"fine = \" .. rtChannel[\"patch\"][\"fine\"])\n    Printf(\"ultra = \" .. rtChannel[\"patch\"][\"ultra\"])\nend"
        
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "GetPresetData": {
    "prefix": "GetPresetData(presetHandle, returnPhaserData, extract)",
    "body": [
      "GetPresetData(${1:presetHandle}, ${2:returnPhaserData}, ${3:extract})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getpresetdata.html#h2_873740972 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------------\n\nThe **GetPresetData** Lua function returns a table with the preset data based on the preset handle.\n\nThe returned table is quite complex and has tables inside the table.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getpresetdata.html#h2__615384334 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The handleof the preset from which the data willbe collected.\n-   **Boolean** | **nil** (optional):\\\n    This boolean determines whether the returned table should only contain phaser data. The default value is \"false\".\n\n-   **Boolean** (optional):\\\n    This boolean defines if there should be an extra object in the returned table. The default value is \"true\". The extra table object has the key \"by_fixtures\", and it contains the same table content as the returned table, but the keys are the fixture ID number instead of the UI Channel Index.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getpresetdata.html#h2__607298120 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------\n\n-   **Table** | **nil**:\\\n    The returned table contains the preset data. It has multiple levels of tables."

    ,
    "examples": {
      "1": {
        "description": "This example prints information about the first level table in the preset data and the first level of the first fixture in the preset. It uses dimmer preset 1, which must exist."

        ,
        "code": "return function()\n    -- Get the handle for the first Dimmer preset.\n    local myPreset = DataPool().PresetPools[1][1]\n    -- Get the Preset Data of the handle.\n    local myPresetData = GetPresetData(myPreset, false, false)\n    -- Check if the GetPresetData returns something. \n    if myPresetData == nil then\n        ErrPrintf(\"Dimmer preset 1 does not exist. Please create one and try again.\")\n        return\n    end\n\n    -- Print the myPresetData table.\n    for Key, value in pairs(myPresetData) do\n      if type(value) == \"table\" then\n        Printf(\"Key: \" .. Key .. \" ; Value type is: \" .. type(value))\n      else\n        Printf(\"Key: \" .. Key .. \" ; Value type is: \" .. type(value) .. \" ; Value: \" .. value)\n      end\n    end\n\n    -- Create a table object to hold all the integer keys in the myPresetData table.\n    local myIntegerTableKeys = {}\n    -- Fill the table.\n    for key,_ in pairs(myPresetData) do\n        if type(key) == \"number\" then\n            table.insert(myIntegerTableKeys, key)\n        end\n    end\n    -- Sort the table\n    table.sort(myIntegerTableKeys)\n\n    -- Print the elements of the fixture with the lowest ui_channel_index in the preset.\n    local tableIndex = myIntegerTableKeys[1]\n    if tableIndex ~= nil then\n        Printf(\"=============== TABLE CONTENT START - Table Key: \" .. tableIndex ..\" ===============\")\n        for Key, value in pairs(myPresetData[tableIndex]) do\n          if type(value) == \"table\" then\n            Printf(\"Key: \" .. Key .. \" ; Value type is: \" .. type(value))\n          else\n            Printf(\"Key: \" .. Key .. \" ; Value type is: \" .. type(value) .. \" ; Value: \" .. tostring(value))\n          end\n        end\n        Printf(\"================ TABLE CONTENT END - Table Key: \" .. tableIndex ..\" ================\")\n    end\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "GetRTChannelCount": {
    "prefix": "GetRTChannelCount()",
    "body": [
      "GetRTChannelCount()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getrtchannelcount.html#h2_873740972 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------------\n\nThe **GetRTChannelCount** Lua function returns a number indicating the total amount of RT channels.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getrtchannelcount.html#h2__615384334 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getrtchannelcount.html#h2__607298120 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------------\n\n-   **Integer**:\\\n    The function returns an integer number depicting the total amount of RT channels."

    ,
    "examples": {
      "1": {
        "description": "This example prints the number of RT channels to the Command Line History:\n\n"
        
        ,
        "code": "return function()\n    Printf(\"The number of RT channels is \" .. GetRTChannelCount())\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "GetRTChannels": {
    "prefix": "GetRTChannels(fixtureIndexOfHandle, returnHandles)",
    "body": [
      "GetRTChannels(${1:fixtureIndexOfHandle}, ${2:returnHandles})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getpresetdata.html#h2_873740972 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------------\n\nThe **GetPresetData** Lua function returns a table with the preset data based on the preset handle.\n\nThe returned table is quite complex and has tables inside the table.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getpresetdata.html#h2__615384334 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The handleof the preset from which the data willbe collected.\n-   **Boolean** | **nil** (optional):\\\n    This boolean determines whether the returned table should only contain phaser data. The default value is \"false\".\n\n-   **Boolean** (optional):\\\n    This boolean defines if there should be an extra object in the returned table. The default value is \"true\". The extra table object has the key \"by_fixtures\", and it contains the same table content as the returned table, but the keys are the fixture ID number instead of the UI Channel Index.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getpresetdata.html#h2__607298120 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------\n\n-   **Table** | **nil**:\\\n    The returned table contains the preset data. It has multiple levels of tables."

    ,
    "examples": {
      "1": {
        "description": "This example prints a list of RT Channel indexes for the first fixture in the selection. It uses an index number as input:\n\n"

        ,
        "code": "return function()\n    -- Get the index number for the first fixture in the current selection \n    local fixtureIndex = SelectionFirst()\n    -- Get the indexes of the RT channels\n    local rtChannels = GetRTChannels(fixtureIndex, false)\n    -- Print an error message if returnd table is nil\n    if rtChannels == nil then\n        ErrPrintf(\"Please select a fixture and try again\")\n        return\n    end\n    -- Print the table content\n    for key,value in ipairs(rtChannels) do\n        Printf(\"List index number \".. key ..\" : RTChannel index number = \".. value)\n    end\nend"
        
        ,
        "suffix": ""
        
      },
      "2": {
        "description": "This example prints a list of RT Channel indexes and attributes for the first fixture in the selection. It uses a handle as the input:\n\n"

        ,
        "code": "return function()\n    -- Get a handle to the first fixture in the current selection\n    local fixtureHandle = GetSubfixture(SelectionFirst())\n    if fixtureHandle == nil then\n        ErrPrintf(\"Please select a fixture and try again\")\n        return\n    end\n    -- Creates a table of handles to the RT channels of the first selected fixture.\n    local rtChannels = GetRTChannels(fixtureHandle, true)\n    if rtChannels == nil then\n        ErrPrintf(\"Please select a fixture and try again\")\n        return\n    end\n    -- Print DMX addresses of the RT Channels for the fixture\n    for key,value in ipairs(rtChannels) do\n        Printf(\"List index number \".. key .. \": RTChannel Index = %i, Coarse DMX addr. = %s, Fine DMX addr. = %s\", value.INDEX, value.COARSE, value.FINE)\n    end\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "GetSample": {
    "prefix": "GetSample(sampleType)",
    "body": [
      "GetSample(${1:sampleType})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getsample.html#h2_873740972 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------\n\nThe **GetSample** Lua function returns a number representing a percentage usage based on a string input.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getsample.html#h2__615384334 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------\n\n-   **String**:\\\n    Only a specific list of strings can be input:\n    -   MEMORY\n    -   CPU\n    -   CPUTEMP\n    -   GPUTEMP\n    -   SYSTEMP\n    -   FANRPM\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getsample.html#h2__607298120 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------\n\n-   **Number**:\\\n    A number (float) is returned."

    ,
    "examples": {
      "1": {
        "description": "This example stores the different samples in a table and then prints the content of the table:\n\n"

        ,
        "code": "return function()\n    -- Gather the sample information in a table\n    local sample = {}\n    sample[\"MEMORY\"] = GetSample(\"MEMORY\")\n    sample[\"CPU\"] = GetSample(\"CPU\")\n    sample[\"CPUTEMP\"] = GetSample(\"CPUTEMP\")\n    sample[\"GPUTEMP\"] = GetSample(\"GPUTEMP\")\n    sample[\"SYSTEMP\"] = GetSample(\"SYSTEMP\")\n    sample[\"FANRPM\"] = GetSample(\"FANRPM\")\n    -- Print the collected data\n    Printf(\"Memory ; \".. sample[\"MEMORY\"])\n    Printf(\"CPU ; \".. sample[\"CPU\"])\n    Printf(\"CPU temperature ; \".. sample[\"CPUTEMP\"])\n    Printf(\"GPU temperature ; \".. sample[\"GPUTEMP\"])\n    Printf(\"System temperature ; \".. sample[\"SYSTEMP\"])\n    Printf(\"Fan RPM ; \".. sample[\"FANRPM\"])\nend"
        
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "GetScreenContent": {
    "prefix": "GetScreenContent(screenHandle)",
    "body": [
      "GetScreenContent(${1:screenHandle})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getscreencontent.html#h2_873740972 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------------\n\nThe **GetScreenContent** Lua function returns a handle to the screen content based on a provided handle to a screen configuration.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getscreencontent.html#h2__615384334 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    This must be a handle to a screen configuration.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getscreencontent.html#h2__607298120 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The returned handle to the screen content."

    ,
    "examples": {
      "1": {
        "description": "This example prints the data connected to the screen content handle. It uses the CurrentScreenConfig() and Dump() functions:"

        ,
        "code": "return function()\n    -- Create a handle for the current screen configuration.\n    local myCurrentScreenConfig = CurrentScreenConfig()\n    -- Create a handle for the screen content based on the screen configuration.\n    local myScreenContent = GetScreenContent(myCurrentScreenConfig)\n    -- Print the Dump of the handle.\n    Printf(\"=============== START OF DUMP ===============\")\n    myScreenContent:Dump()\n    Printf(\"================ END OF DUMP ================\")\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "GetSelectedAttribute": {
    "prefix": "GetSelectedAttribute()",
    "body": [
      "GetSelectedAttribute()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getselectedattribute.html#h2_873740972 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------------------\n\nThe **GetSelectedAttribute** Lua function returns a handle to the currently selected attribute.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getselectedattribute.html#h2__615384334 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getselectedattribute.html#h2__607298120 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The returned handle to the selected attribute."
    
    ,
    "examples": {
      "1": {
        "description": "This example prints the data connected to the handle. It uses the Dump() function:"
        
        ,
        "code": "return function()\n    -- This example dumps all information about the currently selected attribute\n    Printf(\"=============== START OF DUMP ===============\")\n    GetSelectedAttribute():Dump()\n    Printf(\"================ END OF DUMP ================\")\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "GetShowFileStatus": {
    "prefix": "GetShowFileStatus()",
    "body": [
      "GetShowFileStatus()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getshowfilestatus.html#h2_873740972 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------------\n\nThe **GetShowFileStatus** Lua function returns a string with the current device's show file status, for example, \"NoShow\", \"ShowLoaded\", \"ShowDownloaded\", \"ShowSaving\", and \"DataNegotiationActive\".\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getshowfilestatus.html#h2__615384334 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getshowfilestatus.html#h2__607298120 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------------\n\n-   **String**:\\\n    The returned string is the enum string from \"Enums.ShowFileStatus\" that matches the current status."

    ,
    "examples": {
      "1": {
        "description": "This example prints the current device's show file status in the Command Line History:\n\n"
        
        ,
        "code": "return function ()\n    -- Prints the current showfile status\n    Printf(\"ShowfileStatus: \"..GetShowFileStatus())\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "GetSubfixture": {
    "prefix": "GetSubfixture(fixtureIndex)",
    "body": [
      "GetSubfixture(${1:fixtureIndex})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getsubfixture.html#h2_873740972 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------------\n\nThe **GetSubfixture** Lua function returns the handle of the fixture specified by its patch index number.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getsubfixture.html#h2__615384334 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------------\n\n-   **Integer**:\\\n    The patch index number for a fixture. This is also known as the \"subfixtureindex\".\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getsubfixture.html#h2__607298120 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The function returns a handle to the fixture object matching the provided index number."

    ,
    "examples": {
      "1": {
        "description": "This example uses a fixture selection to print all the information (in the Command Line History) about the first fixture in the selection using the Dump() function:\n\n"

        ,
        "code": "return function ()\n    -- Check for a fixture selection, by returning an index for the first fixture\n    if (SelectionFirst()) then\n        -- There is a fixture selection, store the index for the first fixture \n        local fixtureIndex = SelectionFirst()\n        -- Dump all information about the fixture\n        Printf(\"=============== START OF DUMP ===============\")\n        GetSubfixture(fixtureIndex):Dump()\n        Printf(\"================ END OF DUMP ================\")\n    else\n        -- There needs to be a selection of at least one fixture\n        Printf(\"Please select a fixture\")\n    end\nend"
        
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "GetSubfixtureCount": {
    "prefix": "GetSubfixtureCount()",
    "body": [
      "GetSubfixtureCount()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getsubfixturecount.html#h2_873740972 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------------------\n\nThe **GetSubfixtureCount** Lua function returns the total number of fixtures that are patched within the show file.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getsubfixturecount.html#h2__615384334 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getsubfixturecount.html#h2__607298120 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------------\n\n-   **Integer**:\\\n    The returned integer number represents the total amount of patched fixtures on all the stages in the show file."

    ,
    "examples": {
      "1": {
        "description": "This example prints the total number of patched fixtures in the Command Line History:"

        ,
        "code": "return function ()\n    Printf('Total number of patched fixtures: %i', GetSubfixtureCount())\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "GetTokenName": {
    "prefix": "GetTokenName(shortKeyword)",
    "body": [
      "GetTokenName(${1:shortKeyword})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_gettokenname.html#h2_873740972 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------------\n\nThe **GetTokenName** Lua function returns a string with the full keyword based on the short version string input or nil if there is no corresponding keyword.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_gettokenname.html#h2__615384334 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------\n\n-   **String**:\\\n    The string input should correspond to a short version of a keyword.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_gettokenname.html#h2__607298120 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------\n\n-   **String**:\\\n    A string with the full keyword is returned.\n\n\\- OR -\n\n-   **Nil**:\\\n    If there is no corresponding keyword, then nil is returned."
    
    ,
    "examples": {
      "1": {
        "description": "This example returns the full keyword matching the short \"seq\" string:"

        ,
        "code": "return function()\n    -- Store a short string to be used as input\n    local shortToken = 'seq'\n    -- Get the full token name\n    local tokenName = GetTokenName(shortToken)\n    -- Print useful output if nil is not returned\n    if tokenName ~= nil then\n        Printf(\"The full version of '\".. shortToken .. \"' is '\" .. tokenName .. \"'\")\n    end\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "GetTokenNameByIndex": {
    "prefix": "GetTokenNameByIndex(index)",
    "body": [
      "GetTokenNameByIndex(${1:index})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_gettokennamebyindex.html#h2_873740972 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------------------\n\nThe **GetTokenNameByIndex** Lua function returns a string with the keyword based on the index number provided.\n\nEach keyword is described in the [Command Syntax and Keywords section](https://help.malighting.com/grandMA3/2.1/HTML/command_syntax_keywords.html).\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_gettokennamebyindex.html#h2__615384334 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------------------\n\n-   **Integer**:\\\n    The integer input is the index number for a corresponding keyword. There is no apparent logic to the index number and the keyword.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_gettokennamebyindex.html#h2__607298120 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------------\n\n-   **String**:\\\n    A string with the full keyword is returned.\n\n\\- OR -\n\n-   **Nil**:\\\n    If there is no corresponding keyword, then nil is returned."

    ,
    "examples": {
      "1": {
        "description": "If the keyword exists, this example returns the keywords matching the first 443 index numbers:"

        ,
        "code": "return function()\n    -- Create a variable to hold the keyword string\n    local tokenName = \"\"\n    -- Print the keywords to the first 443 indexes if possible\n    for index = 1, 443, 1 do\n        tokenName = GetTokenNameByIndex(index)\n        if tokenName ~= nil then\n            Printf(\"Token index \" .. index .. \" = \" .. tokenName)\n        end\n    end\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "GetTopModal": {
    "prefix": "GetTopModal()",
    "body": [
      "GetTopModal()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_gettopmodal.html#h2_873740972 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------\n\nThe **GetTopModal** Lua function returns a handle for the modal at the top. Modal is the internal name for pop-ups that interrupt the system's normal operation. A modal blocks other UI elements from being used while it is open.\n\nFor example, when opening a window's settings pop-up, it is not possible to use the command line. The settings pop-up is a modal. Modals can also be identified by the rest of the UI, which darkens a bit when it is open.\n\nArgument[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_gettopmodal.html#h2_1267959487 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not have any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_gettopmodal.html#h2__607298120 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle** | **nil**:\\\n    The function returns a handle to the top modal UI object if there is one."

    ,
    "examples": {
      "1": {
        "description": "This example uses the Dump() function to show information about the StagePopup selection pop-up.\n\n"

        ,
        "code": "return function()\n    -- Open a Modal / Pop-up.\n    Cmd('Menu \"StagePopup\"')\n    -- Add a small wait.\n    coroutine.yield({activeShowstatus=0.2})\n    -- Get the handle for the modal / pop-up. \n    local modalHandle = GetTopModal()\n    -- If there is a handle then dump all information else print en error feedback.\n    if modalHandle ~= nil then\n        Printf(\"=============== START OF DUMP ===============\")\n        modalHandle:Dump()\n        Printf(\"================ END OF DUMP ================\")\n    else\n        ErrPrintf(\"The Modal UI object could not be found.\")\n    end\n    -- Close the modal / pop-up by pressing the Escape key.\n    Keyboard(1,'press','Escape')\n    Keyboard(1,'release','Escape')\nend"
      
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "GetTopOverlay": {
    "prefix": "GetTopOverlay()",
    "body": [
      "GetTopOverlay()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_gettopoverlay.html#h2_873740972 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------------\n\nThe **GetTopOverlay** Lua function returns a handle for the overlay at the top of the display with the provided index number. Overlay is the internal name for what is called pop-ups or menus in the rest of this manual.\n\nArgument[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_gettopoverlay.html#h2_1267959487 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not have any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_gettopoverlay.html#h2__607298120 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle** | **nil**:\\\n    The function returns a handle to the top overlay UI object if there is one."
    
    ,
    "examples": {
      "1": {
        "description": "This example uses the D[](https://help.malighting.com/grandMA3/2.1/HTML/lua_object_dump.html)ump() function to show information about the MenuSelector pop-up - it is the one opening when pressing the [Menu key](https://help.malighting.com/grandMA3/2.1/HTML/key_menu.html)."
        
        ,
        "code": "return function()\n    -- Open the MenuSelector overlay.\n    Cmd('Menu \"MenuSelector')\n    -- Add a small delay.\n    coroutine.yield({activeShowstatus=0.2})\n    -- Get the handle for the overlay on the display with index 1.\n    local overlayHandle = GetTopOverlay(1)\n    -- Add a small delay.\n    coroutine.yield({activeShowstatus=0.2})\n    -- Close the MenuSelector overlay.\n    Cmd('Menu \"MenuSelector')\n    -- Check if there is a handle and print appropriate feedback.\n    if overlayHandle ~= nil then\n        Printf(\"=============== START OF DUMP ===============\")\n        overlayHandle:Dump()\n        Printf(\"================ END OF DUMP ================\")\n    else\n        ErrPrintf(\"The Overlay UI object could not be found.\")\n    end\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "GetUIChannelCount": {
    "prefix": "GetUIChannelCount()",
    "body": [
      "GetUIChannelCount()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getuichannelcount.html#h2_873740972 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------------\n\nThe **GetUIChannelCount** Lua function returns a number indicating the total amount of UI channels.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getuichannelcount.html#h2__615384334 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getuichannelcount.html#h2__607298120 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------------\n\n-   **Integer**:\\\n    The function returns an integer number depicting the total amount of UI channels."
    
    ,
    "examples": {
      "1": {
        "description": "This example prints the number of UI channels to the Command Line History:"

        ,
        "code": "return function()\n    Printf(\"The number of UI channels is \" .. GetUIChannelCount())\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "GetUIChannelIndex": {
    "prefix": "GetUIChannelIndex(patchIndex, attributeIndex)",
    "body": [
      "GetUIChannelIndex(${1:patchIndex}, ${2:attributeIndex})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getuichannelindex.html#h2_873740972 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------------\n\nThe **GetUIChannelIndex** Lua function returns the index integer matching a UI channel based on two index inputs.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getuichannelindex.html#h2__615384334 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------------\n\n-   **Integer**:\\\n    The first integer is the patch index of a fixture.\n-   **Integer**:\\\n    This integer is an attribute index (0-based). This can be found in the Attribute Definitions or by the GetAttributeIndex() Lua function.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getuichannelindex.html#h2__607298120 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------------\n\n-   **Integer**:\\\n    The returned integer to a channel function."

    ,
    "examples": {
      "1": {
        "description": "This example prints the UI channel index of the \"Dimmer\" attribute of the first fixture in the current selection:\n\n"

        ,
        "code": "return function()\n    -- Get the Attribute index and UIChannel indexes\n    local attributeIndex = GetAttributeIndex(\"Dimmer\")\n    local uiChannelIndex = GetUIChannelIndex(SelectionFirst(),attributeIndex)\n    -- End the function if any of the index return nil\n    if (attributeIndex == nil or uiChannelIndex == nil) then\n        ErrPrintf(\"Something went wrong, maybe your first selected fixture don't have a Dimmer - Please try again\")\n        return\n    end\n    Printf(\"The UI Channel Index is \" .. uiChannelIndex)\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "GetUIChannels": {
    "prefix": "GetUIChannels(fixtureIndexOrHandle, returnHandles)",
    "body": [
      "GetUIChannels(${1:fixtureIndexOrHandle}, ${2:returnHandles})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getuichannels.html#h2_873740972 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------------\n\nThe **GetUIChannels** Lua function returns a table with UI Channel indexes or a table with handles to the UI Channel objects. There are two different types of arguments for this function.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getuichannels.html#h2__615384334 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------------\n\n-   **Integer**:\\\n    The integer should be the index number for a (sub)fixture.\n-   **Boolean** (Optional):\n    -   **True**:\\\n        The returned table contains handles for UI Channel objects.\n    -   **False** (default):\\\n        The returned table contains integer index values to the UI Channel objects.\n\n\\- OR -\n\n-   **Handle**:\\\n    The handle should relate to a (sub)fixture object.\n-   **Boolean** (Optional):\n    -   **True**:\\\n        The returned table contains handles for UI Channel objects.\n    -   **False** (default):\\\n        The returned table contains integer index values to the UI Channel objects.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getuichannels.html#h2__607298120 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------\n\n-   **Table**:\\\n    The returned table can be a list of UI Channel indexes or handles to the same UI Channel indexes."

    ,
    "examples": {
      "1": {
        "description": "This example prints a list of UI Channel indexes for the first fixture in the selection. It uses an index number as input:"

        ,
        "code": "return function()\n    -- Creates a table of indexes of the UI channels of the first selected fixture.\n    local uiChannels = GetUIChannels(SelectionFirst())\n    if uiChannels == nil then\n        ErrPrintf(\"Please select a fixture and try again\")\n        return\n    end\n    for key,value in ipairs(uiChannels) do\n        Printf(\"List index number \".. key .. \" :  UIChannel Index = \" .. value)\n    end\nend"
      
        ,
        "suffix": ""
        
      },
      "2": {
        "description": "This example prints a list of UI Channel indexes and attributes for the first fixture in the selection. It uses a handle as the input:"

        ,
        "code": "return function()\n    local fixtureHandle = GetSubfixture(SelectionFirst())\n    -- Creates a table of handles to the UI channels of the first selected fixture.\n    local uiChannels = GetUIChannels(fixtureHandle, true)\n    if uiChannels == nil then\n        ErrPrintf(\"Please select a fixture and try again\")\n        return\n    end\n    for key,value in pairs(uiChannels) do\n        Printf(\"List index number \".. key .. \": UIChannel Index = %i, (Sub)Attribute = %s\", value.INDEX-1, value.SUBATTRIBUTE)\n    end\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "GetUIObjectAtPosition": {
    "prefix": "GetUIObjectAtPosition(displayIndex, positionTable)",
    "body": [
      "GetUIObjectAtPosition(${1:displayIndex}, ${2:positionTable})"
    ],
    "description": "Description\n-----------\n\nThe **GetUIObjectAtPosition** Lua function returns the handle of the UI Object at a specified position on a specified display.\n\nArgument\n--------\n\n-   **Integer**:\\\n    The integer should be the index number of the display with the UI object.\n-   **Table**:\\\n    The table must have two elements with the following keys:\n    -   x: This is the X position on the display. The value must be a number indicating the desired pixel position. It is counted from the left side of the display.\n\n    -   y: This is the Y position on the display. The value must be a number indicating the desired pixel position. It is counted from the top of the display.\n\nReturn\n------\n\n-   **Handle** | **nil**:\\\n    If a UI object is at the provided position, then the handle to the object is returned. Otherwise, it returns nil."
    
    ,
    "examples": {
      "1": {
        "description": "This example prints the Dump of the UIObject at a specific position on display 1. It also uses the DrawPointer function to draw a red pointer at the position.\n\n"

        ,
        "code": "return function()\n    -- Get the index number for \"Display 1\"\n    local displayIndex = GetDisplayCollect()[\"Display 1\"].INDEX\n    -- Create a table with X and Y position\n    local positionTable = {}\n    positionTable.x = 1000\n    positionTable.y = 500\n    -- Get the UI object handle\n    local uiObjectAtPositionHandle = GetUIObjectAtPosition(displayIndex,positionTable)\n    -- Dump all information about the display with the index number if not nil\n    if uiObjectAtPositionHandle == nil then\n        Printf(\"The returned value was not a valid handle.\")\n        return\n    end\n    -- Draw a pointer at the posiiton for 5 seconds\n    DrawPointer(displayIndex,positionTable,5000)\n    --Dump of the UIObject\n    Printf(\"=============== START OF DUMP ===============\")\n    uiObjectAtPositionHandle:Dump()\n    Printf(\"================ END OF DUMP ================\")\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "GetVar": {
    "prefix": "GetVar(variableHandle, varName)",
    "body": [
      "GetVar(${1:variableHandle}, ${2:varName})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getvar.html#h2_873740972 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------\n\nThe **GetVar** Lua function returns the value of a specific variable in a set of variables. To learn more about the variables in plugins, look at the [Variable Functions](https://help.malighting.com/grandMA3/2.1/HTML/lua_variables.html) topic.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getvar.html#h2__615384334 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The handle of variable set.\n-   **String**:\\\n    The name of the variable. It needs to be in quotation marks.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getvar.html#h2__607298120 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------\n\n-   **Value**:\\\n    This is the value of the variable.\n\nIf the variable does not exist, then nil is returned."

    ,
    "examples": {
      "1": {
        "description": "This example returns the value of a variable called \"myUserVar\" in the set of user variables if it exists:"

        ,
        "code": "return function()\n    -- Get the value from a user variable called \"myUserVar\" - assuming it already exists\n    local varValue = GetVar(UserVars(), \"myUserVar\")\n    -- Print en error feedback or the value of the variable\n    if varValue == nil then\n        Printf(\"Variable returns nothing!\")\n    else\n        Printf(\"Variable value is: \" .. varValue)\n    end\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "GlobalVars": {
    "prefix": "GlobalVars()",
    "body": [
      "GlobalVars()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_globalvars.html#h2_873740972 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------\n\nThe **GlobalVars** function returns a handle to the set of global variables. Read more about these in the [Variables](https://help.malighting.com/grandMA3/2.1/HTML/macro_variables.html) topic in the Macro section.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_globalvars.html#h2__615384334 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_globalvars.html#h2__607298120 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The function returns a handle of the set of global variables."

    ,
    "examples": {
      "1": {
        "description": "This example sets, gets, and deletes a global variable:"

        ,
        "code": "return function()\n    -- Stores a local Lua variable with the handle for the global variable set.\n    local variableSet = GlobalVars()\n    -- Sets a global variable with an integer value using the SetVar() function.\n    SetVar(variableSet, \"myGlobalVar\", 42)\n    -- Prints the global variable using the GetVar() function.\n    Printf(\"The value  of myGlobalVar is: \" .. GetVar(variableSet, \"myGlobalVar\"))\n    -- Deletes the global variable using the DelVar() function.\n    DelVar(variableSet, \"myGlobalVar\")\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "HandleToInt": {
    "prefix": "HandleToInt(objectHandle)",
    "body": [
      "HandleToInt(${1:objectHandle})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_handletoint.html#h2_873740972 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------\n\nThe **HandleToInt** Lua function converts a handle into an integer format.\n\nSee the [Handle topic](https://help.malighting.com/grandMA3/2.1/HTML/lua_handle.html) for more info regarding handles and links to other related functions.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_handletoint.html#h2__615384334 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The handle of the object.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_handletoint.html#h2__607298120 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------\n\n-   **Integer**:\\\n    The returned integer is the handle converted to an integer."
    
    ,
    "examples": {
      "1": {
        "description": "This example prints the handle integer number for the selected sequence. It also converts the integer back to a handle and uses this to print the name of the sequence:\n\n"

        ,
        "code": "return function()\n    Printf(\"The integer number for the handle of the selected sequence: %i\", HandleToInt(SelectedSequence()))\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "HandleToStr": {
    "prefix": "HandleToStr(objectHandle)",
    "body": [
      "HandleToStr(${1:objectHandle})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_handletostring.html#h2_873740972 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------------\n\nThe **HandleToStr** Lua function converts a handle into a string in a hexadecimal number format.\n\nSee the [Handle topic](https://help.malighting.com/grandMA3/2.1/HTML/lua_handle.html) for more info regarding handles and links to other related functions.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_handletostring.html#h2__615384334 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The handle of the object.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_handletostring.html#h2__607298120 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------\n\n-   **String**:\\\n    The returned string is the handle number converted to a hexadecimal format."
    
    ,
    "examples": {
      "1": {
        "description": "This example prints the handle hex number for the selected sequence. It also converts the string back to a handle and uses this to print the name of the sequence:\n\n"

        ,
        "code": "return function()\n    Printf(\"The string (in hex format with 'H#' in front) for the handle of the selected sequence: %s\",HandleToStr(SelectedSequence()))\nend"
        
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "HookObjectChange": {
    "prefix": "HookObjectChange(functionName, objectHandle, pluginHandle, passedObjectHandle)",
    "body": [
      "HookObjectChange(${1:functionName}, ${2:objectHandle}, ${3:pluginHandle}, ${4:passedObjectHandle})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_hookobjectchange.html#h2_873740972 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------------\n\nThe **HookObjectChange** Lua function automatically calls a function when a grandMA3 object changes.\n\nArguments\n---------\n\n-   **Function**:\\\n    This must be the name of a function. This function is triggered every time the provided grandMA3 object changes.\n\n-   **Handle**:\\\n    This is the handle for the grandMA3 objects that should be monitored for changes. The triggered function passes this handle on as the first argument.\n-   **Handle**:\\\n    The handle must be for the plugin creating this HookObjectChange - it is the handle for \"this\" plugin.\n-   **Handle** (optional):\\\n    This optional handle is for an object that will be passed on to the triggered function (as the third argument).\n\nReturn\n------\n\n-   **Integer**:\\\n    The function returns an integer identifying the hook. This can be saved to unhook the object later.\n\n![](https://help.malighting.com/grandMA3/2.1/Storage/grandma3-user-manual-publication/Client/Content/images/icons/tip_gray.png) **Hint:**\nSee also these related functions: [DumpAllHooks](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_dumpallhooks.html), [Unhook](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_unhook.html), [UnhookMultiple](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_unhookmultiple.html)."

    ,
    "examples": {
      "1": {
        "description": "To call a function every time the content of the sequence pool changes, create a plugin with this code:"

        ,
        "code": "-- Get the handle to this Lua component.\nlocal luaComponentHandle = select(4,...)\n\nfunction Main()\n    -- Get a handle to the sequence pool.\n    local hookObject = DataPool().Sequences\n    -- Get a handle to this plugin.\n    local pluginHandle = luaComponentHandle:Parent()\n    -- Create the hook and save the Hook ID.\n    SequenceHookId = HookObjectChange(MySequencePoolCallback, hookObject, pluginHandle)\n    -- Print the returned Hook ID.\n    Printf(\"HookId: \" .. SequenceHookId)\nend\n\n-- This function is called when there are changes in the sequence pool.\nfunction MySequencePoolCallback(obj)\n    Printf(tostring(obj.name) .. \" changed!\")\nend\n\nreturn Main"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "HostOS": {
    "prefix": "HostOS()",
    "body": [
      "HostOS()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_hostos.html#h2_873740972 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------\n\nThe **HostOS** Lua function returns a string with the type of operating system of the device where the plugin is executed (for instance, \"Windows\", \"Linux\", or \"Mac\").\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_hostos.html#h2__615384334 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_hostos.html#h2__607298120 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------\n\n-   **String**:\\\n    The returned string is the operating system of the grandMA3 hardware or grandMA3 onPC computer."

    ,
    "examples": {
      "1": {
        "description": "This example prints the operating system of the device in the Command Line History:\n\n"

        ,
        "code": "return function()\n    Printf(\"The HostOS is \"..HostOS())\nend"
        
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "HostSubType": {
    "prefix": "HostSubType()",
    "body": [
      "HostSubType()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_hostsubtype.html#h2_873740972 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------\n\nThe **HostSubType** Lua function returns a string with the host sub type of the station where the plugin is executed (for example, \"FullSize\", \"Light\", \"RPU\", \"onPCRackUnit\", \"Undefined\").\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_hostsubtype.html#h2__615384334 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_hostsubtype.html#h2__607298120 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------\n\n-   **String**:\\\n    The returned string is the host sub-type of the device."
    ,
    "examples": {
      "1": {
        "description": "This example prints the host sub-type of the station in the Command Line History:"

        ,
        "code": "return function()\n    Printf(\"The HostSubType is \"..HostSubType())\nend"
        
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "HostType": {
    "prefix": "HostType()",
    "body": [
      "HostType()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_hosttype.html#h2_873740972 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------\n\nThe **HostType** Lua function returns a string with the host type of the device where the plugin is executed (for example, \"Console\" or \"onPC\").\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_hosttype.html#h2__615384334 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_hosttype.html#h2__607298120 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------\n\n-   **String**:\\\n    The returned string is the host type of the device."
    
    ,
    "examples": {
      "1": {
        "description": "This example prints the host type of the device in the Command Line History:"
        
        ,
        "code": "return function()\n    Printf(\"The HostType is \"..HostType())\nend"
        
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "Import": {
    "prefix": "Import(fileName)",
    "body": [
      "Import(${1:fileName})"
    ],
    "description": "Description\n-----------\n\nThe object-free **Import** Lua function imports a Lua table in XML format.\n\nThis function correlates to the [Export function](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_export.html).\n\nArguments\n---------\n\n-   **String**:\\\n    This is a string containing the file name of the desired imported file. It should contain the file name, including the entire path. See the example below.\n\nReturn\n------\n\n-   **Table**:\\\n    This is the imported table."

    ,
    "examples": {
      "1": {
        "description": "This example imports the table exported using the example in the Export() function topic - please run that example before running this example.\n\n"

        ,
        "code": "return function ()\n    -- Get the path for the exported table.\n    local importPath = GetPath(Enums.PathType.Library) .. \"/BuildDetails.xml\"\n    -- Check if the file exist and print relevant feedback.\n    if importPath == nil then\n        -- File does not exist.\n        ErrPrintf(\"The desired file does not exist. Please add it or adjust the requested file name.\")\n    else\n        -- Import the table.\n        local importedTable = Import(importPath)\n        -- Check if the import returned something and print relevant feedback.\n        if importedTable == nil then\n            -- Import didn't return anything.\n            ErrPrintf(\"The import failed.\")\n        else\n        -- Print some of the table content.\n        Printf(\"CompileDate: \" .. importedTable.CompileDate)\n        Printf(\"CompileTime: \" .. importedTable.CompileTime)\n        Printf(\"BigVersion: \" .. importedTable.BigVersion)\n        Printf(\"HostType: \" .. importedTable.HostType)\n        Printf(\"HostSubType: \" .. importedTable.HostSubType)\n        Printf(\"CodeType: \" .. importedTable.CodeType)\n        end\n    end\nend"
        
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "IncProgress": {
    "prefix": "IncProgress(progressBarHandle, value)",
    "body": [
      "IncProgress(${1:progressBarHandle}, ${2:value})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_incprogress.html#h2_873740972 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------\n\nThe **IncProgress** Lua function changes the value on the range for a progress bar using an integer input. A handle input argument defines the progress bar. The progress bar needs to be created using the [](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_startprogress.html)StartProgress() function.\n\nSee the [ProgressBar topic](https://help.malighting.com/grandMA3/2.1/HTML/lua_interface_progressbar.html) for more info regarding progress bars and links to other related functions.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_incprogress.html#h2__615384334 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The handle for the progress bar.\n-   **Integer**:\\\n    The desired value for the range. This can be a negative value to decrease the value.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_incprogress.html#h2__607298120 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------\n\nThis function does not return anything."

    ,
    "examples": {
      "1": {
        "description": "This example increase the range value for the progress bar created using the example in the StartProgress topic (link above):"

        ,
        "code": "return function()\n    -- Increase the current value for a progress bar with the matching handle.\n    IncProgress(progressHandle, 1)\nend"
        
        ,
        "suffix": ""
        
      },
      "2": {
        "description": "This example decrease the range value for the progress bar created using the example in the StartProgress topic (link above):"

        ,
        "code": "return function()\n    -- Decrease the current value for a progress bar with the matching handle.\n    IncProgress(progressHandle, -1)\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "IntToHandle": {
    "prefix": "IntToHandle(handleInteger)",
    "body": [
      "IntToHandle(${1:handleInteger})"
    ],
    "description": "Description\n-----------\n\nThe **IntToHandle** Lua function converts an integer number into a handle. The integer needs to correlate with an actual handle.\n\nSee the [Handle topic](https://help.malighting.com/grandMA3/2.1/HTML/lua_handle.html) for more info regarding handles and links to other related functions.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_inttohandle.html#h2__615384334 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------\n\n-   **Integer**:\\\n    The integer that correlates to an object's handle.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_inttohandle.html#h2__607298120 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The returned handle of the object correlates with the integer."

    ,
    "examples": {
      "1": {
        "description": "This example prints the handle integer number for the selected sequence. It also converts the integer back to a handle and uses this to print the name of the sequence:\n\n"

        ,
        "code": "return function()\n    -- Convert the handle of the currently selected sequence to an integer\n    local handleInt = HandleToInt(SelectedSequence())\n    -- Print the handle integer\n    Printf(\"The handle integer number of the selected sequence: %i\", HandleToInt(SelectedSequence()))\n    -- Convter the integer back to a hanndle and use it to get the sequence name\n    Printf(\"The name of the selected sequence is: %s\", IntToHandle(handleInt).name)\nend"
        
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "IsClassDerivedFrom": {
    "prefix": "IsClassDerivedFrom(derivedClassName, baseClassName)",
    "body": [
      "IsClassDerivedFrom(${1:derivedClassName}, ${2:baseClassName})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_isclassderivedfrom.html#h2_873740972 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------------------\n\nThe **IsClassDerivedFrom** Lua function returns a boolean indicating if a class is derived from a different class.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_isclassderivedfrom.html#h2__615384334 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------------\n\n-   **String**:\\\n    This string needs to be the name of the class that might be derived from a different class.\n-   **String**:\\\n    This string needs to be the name of the class that might be the base class.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_isclassderivedfrom.html#h2__607298120 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------------\n\n-   **Boolean**:\\\n    The returned boolean indicates if the class is derived from the base class."
    
    ,
    "examples": {
      "1": {
        "description": "This example checks if a class is derived from a different class and returns useful feedback."

        ,
        "code": "return function()\n    -- Set the value of the two strings.\n    local derivedName = \"World\"\n    local baseName = \"Group\"\n    -- Check if the derivedName is the name of a class derived from the baseName class.\n    local isDerived = IsClassDerivedFrom(derivedName, baseName)\n    -- Provide feedback.\n    if isDerived then\n        Printf(derivedName .. \" is derived from \" .. baseName)\n    else\n        Printf(derivedName .. \" is not derived from \" .. baseName)\n    end\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "IsObjectValid": {
    "prefix": "IsObjectValid(objectHandle)",
    "body": [
      "IsObjectValid(${1:objectHandle})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_isobjectvalid.html#h2_873740972 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------------\n\nThe **IsObjectValid** function returns a boolean true or nil depending on whether the supplied argument is a valid object.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_isobjectvalid.html#h2__615384334 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The argument should be the handle to a possible object.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_isobjectvalid.html#h2__607298120 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------\n\n-   **Boolean or nil**:\\\n    The returned value is a boolean True if the handle is a valid object or it returns nil if it is not a valid object."

    ,
    "examples": {
      "1": {
        "description": "This example below examines if \"Root()\" is a valid object and prints meaningful feedback:"
        
        ,
        "code": "return function()\n    --Create a variable with the possible object\n    local myObject = Root()\n    --Check if it is an object\n    local myReturn = IsObjectValid(myObject)\n    --Print the result\n    if myReturn == nil then\n        ErrPrintf(\"It is not a valid object\")\n    else\n        Printf(\"It is an object\")\n    end\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "KeyboardObj": {
    "prefix": "KeyboardObj()",
    "body": [
      "KeyboardObj()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_masterpool.html#h2_873740972 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------\n\nThe **MasterPool** Lua function returns the handle to the masters.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_masterpool.html#h2__615384334 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_masterpool.html#h2__607298120 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The function returns the handle to the pool of masters."
    ,
    "examples": {
      "1": {
        "description": "This example prints the information of the keyboard object. It uses the Dump() function:"

        ,
        "code": "return function()\n    -- Print all informatin about the KeyboardObj object\n    Printf(\"=============== START OF DUMP ===============\")\n    KeyboardObj():Dump()\n    Printf(\"================ END OF DUMP ================\")\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "MasterPool": {
    "prefix": "MasterPool()",
    "body": [
      "MasterPool()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_masterpool.html#h2_873740972 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------\n\nThe **MasterPool** Lua function returns the handle to the masters.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_masterpool.html#h2__615384334 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_masterpool.html#h2__607298120 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The function returns the handle to the pool of masters."

    ,
    "examples": {
      "1": {
        "description": "This example prints the information of the MasterPool object. It uses the Dump() function:\n\n"

        ,
        "code": "return function()\n    -- Print all informatin about the MasterPool object\n    Printf(\"=============== START OF DUMP ===============\")\n    MasterPool():Dump()\n    Printf(\"================ END OF DUMP ================\")\nend"
        
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "MessageBox": {
    "prefix": "MessageBox(objectHandle)",
    "body": [
      "MessageBox(${1:objectHandle})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_messagebox.html#h2_873740972 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------\n\nThe MessageBox Lua function is used to create pop-up message boxes. These can be simple or complex information pop-ups with many different options and user inputs.\n\nThe message box contains multiple elements that must be defined in a table. This table is the single input argument to the function.\n\nThe elements in the message box are displayed in alphabetical order.\n\nThis function is part of the User Interface functions.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_messagebox.html#h2__615384334 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------\n\n-   **Table**:\\\n    The input to the function must be formatted as a table using key-value pairs. The needed elements have default values that will be used if not overwritten. The values can be defined in any order if the key is defined.\\\n    The table can have the following elements:\n    -   **title**:\\\n        This is the title of the pop-up message box.\n    -   **titleTextColor**:\\\n        This is the text color for the title text. The value is a number or string that refers to the **UI Colors** in the color theme. See the link below.\n    -   **backColor**:\\\n        This is the color of the frame or border of the pop-up. The value is a number or string that refers to the **UI Colors** in the color theme. See the link below.\n    -   **icon**:\\\n        This is an icon that can be shown in the upper left corner of the pop-up. The value can be an integer or a string that refers to the number or name of a texture image (without the file format).\\\n        The icons can be listed by navigating to the texture folder ChangeDestination GraphicsRoot/TextureCollect/Textures and then doing a List command.\\\n        This shows a long list with numbers and names of all the textures in the Command Line History window.\n    -   **message**:\\\n        This message text string is displayed in the main part of the pop-up. A new line can be created by adding a \"\\n\" in the text.\n    -   **messageTextColor**:\\\n        This is the text color for the message text. The value is a number or string that refers to the **UI Colors** in the color theme. See the link below.\n    -   **autoCloseOnInput**:\\\n        This option defines if a Please (or Enter) from an input field closes the message box pop-up. The default value is **true**. Setting this to **false** keeps the message box open until it is explicitly closed. See example 5 below.\n    -   **timeout**:\\\n        The timeout value is an integer that indicates how long the message box is displayed in milliseconds. It will show a countdown timer at the top of the message area. When the countdown runs out, it will close the pop-up.\\\n        When the timeout closes the pop-up, it returns a **success** element with a **true** value (see more about the return below). It was closed \"normally\".\n    -   **timeoutResultCancel**:\\\n        This element can change the return to mimic a cancel of the pop-up, which returns a **false** instead of a **true** for the **success **element.\n    -   **timeoutResultID**:\\\n        When the timeout closes the pop-up with the **success **value = **true**, a special return result can be defined using this, for instance, setting the value to 99 - then 99 is returned when the message box is closed by the timeout.\n    -   **commands**:\\\n        The commands are buttons at the bottom of the message box pop-up. The input here is a table of objects using the following structure:\n        -   **value**:\\\n            This integer value will be returned as the result value - see more about the return below.\n        -   **name**:\\\n            This is a string which will be shown on the button.\n    -   **inputs**:\\\n        The inputs are user input fields where text or numbers can be input. The input fields will be displayed in alphabetical order.\\\n        The input fields are defined using an table with the following structure (see example 5 below):\n        -   **name**:\\\n            This is a string value - the text will be shown as a label for the input field.\n        -   **value**:\\\n            This is a string value - it is a default input value for the input field.\n        -   **blackfilter**:\\\n            This is a string value - it defines input characters that are not allowed.\n        -   **whitefilter**:\\\n            This is a string value - it defines which input characters are allowed.\n        -   **vkPlugin**:\\\n            This is a string value - it is the name of the input pop-up, which is opened if the on-screen keyboard icon (![](https://help.malighting.com/grandMA3/2.1/Storage/grandma3-user-manual-publication/img/icon_keyboard_15_v1-9.png)) is tapped in the pop-up. Example 5 below has a list of possible vkPlugin values.\n        -   **maxTextLength**:\\\n            This is an integer value - it defines the maximum number of characters for the input.\n    -   **states**:\\\n        The states are buttons in the pop-up. State buttons have a small checkbox and can have a true or false state. The buttons will be displayed in alphabetical order.\\\n        The buttons are defined using a table with the following structure (see example 4 below):\n        -   **name**:\\\n            This is a string value - the text will be shown on the button.\n        -   **state**:\\\n            This is the initial state of the button checkbox.\n    -   **selectors**:\\\n        Selector buttons are two different types of buttons. Each type can have a selected value based on a list of available values. The two types are **Swipe **button (type 0) and **Radio **button (type 1).\\\n        The buttons are defined in a table with the following structure:\n        -   **name**:\\\n            This is a string value - the text will be shown on the button (swipe button) or as a label above the buttons (radio buttons).\n        -   **selectedValue**:\\\n            This is an integer value - it defines the default selected value\n        -   **type**:\\\n            This is an integer value - it defines the type of selector button. The options are:\n            -   **0**:\\\n                This defines the button as a swipe button.\n            -   **1**:\\\n                This defines the button as a radio button.\n        -   **values**:\\\n            This is another table containing the different values available for the selector button. Each value element in the table has the following structure: [\"string\"]=integer\\\n            The string is the name displayed for the value. The integer is the value returned and the one used for **selectedValue** (see above). See example 6 below for an example of use.\n\nThe table can contain some or all of the elements described above.\n\nThe colors mentioned above can be a string or number value. It refers to a defined UI Color in the color theme, for instance, **\"Global.Text\"** or **1.27**. See more in the [Color Theme topic](https://help.malighting.com/grandMA3/2.1/HTML/ws_colors_color_theme.html).\n\nA message box pop-up should have at least a title, message, and *either *a timeout *or* some basic command buttons. See the first three examples below.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_messagebox.html#h2__607298120 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------\n\n-   **Table**:\\\n    The return from a message box pop-up is formatted in a table. The returned table adjusts to match the elements of the message box. For instance, if there are selection buttons in the message box, then there is another table inside the result table containing the return from the selection buttons. See the examples for details on how to retrieve the results. The table can contain the following elements:\n    -   **success**:\\\n        This is a boolean - it returns true if the message box was closed by tapping a command button or by a timeout (see **timeoutResultCancel** above for exceptions).\n    -   **result**:\\\n        This is an integer - it returns the value of the tapped command button or the timeout result ID.\n    -   **inputs** (only if the message box has inputs fields):\\\n        This is a table with a list of the input fields' name and string value in a key-value pair table.\n    -   **states** (only if the message box has state buttons):\\\n        This is a table with a list of the state buttons' name and boolean value in a key-value pair table.\n    -   **selectors** (only if the message box has selector buttons):\\\n        This is a table with a list of the selector buttons' name and integer value in a key-value pair table.\n\nAn error is thrown if the message box does not have inputs, states, and selectors, but the script tries to use the table elements.\n\nSee the examples to see how to extract the results."

    ,
    "examples": {
      "1": {
        "description": "A simple message box pop-up that shows a single confirm button:"

        ,
        "code": "return function ()\n    -- This creates a small pop-up with a single button.\n    local returnTable = MessageBox(\n        {\n            title = \"Please confirm This\",\n            commands = {{value = 1, name = \"Confirm\"}}\n        }\n    )\n\n    -- Print the content of the returned table. \n    Printf(\"Success = \"..tostring(returnTable.success))\n    Printf(\"Result = \"..returnTable.result)\nend"

        ,
        "suffix": ""
        
      },
      "2": {
        "description": "This example opens a pop-up with some text and two command buttons:"

        ,
        "code": "return function ()\n    -- A table with two default buttons for the pop-up\n    local defaultCommandButtons = {\n        {value = 2, name = \"OK\"},\n        {value = 1, name = \"Cancel\"}\n    }\n\n    -- A table with the elements needed for the pop-up\n    local messageTable = {\n        icon = \"object_smart\",\n        backColor = \"Window.Plugins\",\n        title = \"This is the title\",\n        message = \"This is a message\\nThat can have multiple lines\",\n        commands = defaultCommandButtons,\n    }\n\n    -- The creation on the actual pop-up with the result stored in a variable\n    local returnTable = MessageBox(messageTable)\n\n    -- Print the content of the returned table\n    Printf(\"Success = \"..tostring(returnTable.success))\n    Printf(\"Result = \"..returnTable.result)\nend"
        
        ,
        "suffix": ""
        
      },
      "3": {
        "description": "This example displays a message box for 3 seconds and then closes itself:"

        ,
        "code": "return function ()\n    -- This variable contains the table used as argument for the messagebox\n    local messageTable = {\n        title = \"Do not worry\",\n        message = \"This message will self destruct\\nGoodbye!\",\n        timeout = 3000,\n        timeoutResultCancel = false,\n        timeoutResultID = 99,\n    }\n\n    -- This creates the messagebox pop-up and store the return table in a variable\n    local returnTable = MessageBox(messageTable)\n\n    -- Print the content of the returned table\n    Printf(\"Success = \"..tostring(returnTable.success))\n    Printf(\"Result = \"..returnTable.result)\nend"

        ,
        "suffix": ""
        
      },
      "4": {
        "description": "This example adds state buttons to the message box. The buttons are added to a table for a better overview."

        ,
        "code": "return function ()\n    -- A table with two default buttons for the pop-up\n    local defaultCommandButtons = {\n        {value = 2, name = \"OK\"},\n        {value = 1, name = \"Cancel\"}\n    }\n    -- A table with three state buttons \n    -- The buttons will be displayed alphabetically in the pop-up\n    local stateButtons = {\n        {name = \"State B\", state = false},\n        {name = \"State A\", state = false},\n        {name = \"New State\", state = false}\n    }\n\n    -- A table with the elements needed for the pop-up\n    local messageTable = {\n        icon = \"object_smart\",\n        backColor = \"Window.Plugins\",\n        title = \"This is state buttons\",\n        message = 'Toggle the states and click \"Ok\"',\n        commands = defaultCommandButtons,\n        states = stateButtons,\n    }\n\n    -- The creation on the actual pop-up with the result stored in a variable\n    local returnTable = MessageBox(messageTable)\n\n    -- Print the content of the returned table\n    Printf(\"Success = \"..tostring(returnTable.success))\n    Printf(\"Result = \"..returnTable.result)\n    \n    -- Print a list with the state of the stateButtons\n    for name,state in pairs(returnTable.states) do\n        Printf(\"State '%s' = '%s'\",name,tostring(state))\n    end\nend"

        ,
        "suffix": ""
        
      },
      "5": {
        "description": "This example shows the input fields."

        ,
        "code": "return function ()\n    -- A table with two default buttons for the pop-up\n    local defaultCommandButtons = {\n        {value = 2, name = \"OK\"},\n        {value = 1, name = \"Cancel\"}\n    }\n    -- A table with three input fields\n    -- The fields will be displayed alphabetically in the pop-up based on name\n    local inputFields = {\n        {name = \"Numbers Only\", value = \"1234\", whiteFilter = \"0123456789\", vkPlugin = \"NumericInput\"},\n        {name = \"Text Only\", value = \"abcdef\", blackFilter = \"0123456789\"},\n        {name = \"Maximum 10 characters\", value = \"\", maxTextLength = 10}\n    }\n    -- Possible vkPlugin values:\n    -- - \"TextInput\" : same as default - standrd on-screne keyboard\n    -- - \"TextInputNumOnly\" : text input but only with number buttons\n    -- - \"TextInputNumOnlyRange\" : text input but only with number and related range buttons \n    -- - \"TextInputTimeOnly\" : text input styled for time input - includes buttons for time values\n    -- - \"NumericInput\" : general number input\n    -- - \"CueNumberInput\" : number input styled for cue number\n    -- - \"RelCueNumberInput\" : number input with the relative \"delta\" button\n    -- - \"IP4Prefix\" : designed for inputting an IPv4 address allowing CIDR notation\n\n    -- A table with the elements needed for the pop-up\n    local messageTable = {\n        icon = \"object_smart\",\n        backColor = \"Window.Plugins\",\n        title = \"This is input fields\",\n        message = 'Change the values in the input fields and click \"Ok\"',\n        commands = defaultCommandButtons,\n        inputs = inputFields,\n        autoCloseOnInput = false\n    }\n\n    -- The creation on the actual pop-up with the result stored in a variable\n    local returnTable = MessageBox(messageTable)\n\n    -- Print the content of the returned table\n    Printf(\"Success = \"..tostring(returnTable.success))\n    Printf(\"Result = \"..returnTable.result)\n    -- Print a list with the values of the input fields\n    for name,value in pairs(returnTable.inputs) do\n        Printf(\"Input '%s' = '%s'\",name,tostring(value))\n    end\nend"

        ,
        "suffix": ""
        
      },
      "6": {
        "description": "This example shows the different selector buttons."

        ,
        "code": "return function ()\n    -- A table with two default buttons for the pop-up\n    local defaultCommandButtons = {\n        {value = 2, name = \"OK\"},\n        {value = 1, name = \"Cancel\"}\n    }\n    -- A table with selector buttons\n    -- The buttons will be displayed alphabetically in the pop-up based on name\n    local selectorButtons = {\n        { name=\"Swipe Selector\", selectedValue=1, type=0, values={[\"Swipe1\"]=1,[\"Swipe2\"]=2}},\n        { name=\"Radio Selector\", selectedValue=2, type=1, values={[\"Radio1\"]=1,[\"Radio2\"]=2}},\n        { name=\"Another Radio\", selectedValue=3, type=1, values={[\"Radio3\"]=3,[\"Radio4\"]=4}}\n    }\n\n    -- State button to show grouping with swipe Selector button\n    local stateButton = {\n        {name = \"State Button\", state = false},\n    }\n    -- A table with the elements needed for the pop-up\n    local messageTable = {\n        icon = \"object_smart\",\n        backColor = \"Window.Plugins\",\n        title = \"This is input fields\",\n        message = 'Change the values in the input fields and click \"Ok\"',\n        commands = defaultCommandButtons,\n        states = stateButton,\n        selectors = selectorButtons,\n    }\n\n    -- The creation on the actual pop-up with the result stored in a variable\n    local returnTable = MessageBox(messageTable)\n\n    -- Print the content of the returned table\n    Printf(\"Success = \"..tostring(returnTable.success))\n    Printf(\"Result = \"..returnTable.result)\n    -- Print a list with the values of the selection buttons\n    for name,value in pairs(returnTable.selectors) do\n        Printf(\"Input '%s' = '%s'\",name,tostring(value))\n    end\n    -- Print a list with the state of the stateButton\n    for name,state in pairs(returnTable.states) do\n        Printf(\"State '%s' = '%s'\",name,tostring(state))\n    end\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "MouseObj": {
    "prefix": "MouseObj()",
    "body": [
      "MouseObj()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_mouseobj.html#h2_873740972 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------\n\nThe **MouseObj** function returns the handle to the first found mouse object.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_mouseobj.html#h2__615384334 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_mouseobj.html#h2__607298120 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The function returns the handle to the mouse object."

    ,
    "examples": {
      "1": {
        "description": "This example prints the information of the mouse object. Is uses the Dump() function:"

        ,
        "code": "return function()\n    -- Print all informatin about the MouseObj object\n    Printf(\"=============== START OF DUMP ===============\")\n    MouseObj():Dump()\n    Printf(\"================ END OF DUMP ================\")\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "NeedShowSave": {
    "prefix": "NeedShowSave()",
    "body": [
      "NeedShowSave()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_needshowsave.html#h2_873740972 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------------\n\nThe **NeedShowSave** Lua function returns a boolean indicating if there are unsaved changes to the showfile.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_needshowsave.html#h2__615384334 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_needshowsave.html#h2__607298120 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------\n\n-   **Boolean**:\\\n    The boolean returns True if there are unsaved changes to the show file. False indicates that the show file has not changed since the last save. These indications do not include changes to the playback state of the show."

    ,
    "examples": {
      "1": {
        "description": "This example prints feedback indicating if the show file should be saved or not."

        ,
        "code": "return function ()\n    -- Check if the show should be saved.\n    if NeedShowSave() then\n        Printf(\"You should save your showfile.\")\n    else\n        Printf(\"You do not need to save your showfile.\")\n    end\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "ObjectList": {
    "prefix": "ObjectList(objectListCommand, optionsTable)",
    "body": [
      "ObjectList(${1:objectListCommand}, ${2:optionsTable})"
    ],
    "description": "Description\n-----------\n\nThe **ObjectList** Lua function returns a table with handles. The table is created based on a string input that should create a selection.\n\nArgument\n--------\n\n-   **String**:\\\n    The string must be a command that would create a range of objects in the command line.\n-   **Table** (optional):\\\n    The table can contain two possible named elements. Each element can have a boolean true or false value. See the examples below for how to use them.\n\n    -   **'reverse_order'**:\\\n        This must have a boolean value. If this is true then the returned list is in reverse order.\n\n    -   **'selected_as_default'**:\\\n        This must have a boolean value. If this is true then the object list will only contain the object that is selected in the pool. For instance, it only returns the currently selected filter from the filter pool.\n\nReturn\n------\n\n-   **Table**:\\\n    The function returns a table with handles to the objects based on the string argument."

    ,
    "examples": {
      "1": {
        "description": "This example returns the names and patch addresses of fixtures 1 through 10. It assumes these fixtures exist - if they do not, then it returns an error text."

        ,
        "code": "return function()\n    -- Create a list of handles based on the \"Fixture 1 Thru 10\" selection and store it in a table. \n    local myObjects = ObjectList(\"Fixture 1 Thru 10\", {reverse_order=true})\n    -- If the selection returned a table, then go through all elements and print information of the object.\n    if myObjects~= nil then\n        for i in pairs(myObjects) do\n            Printf(\"Fixture: \" .. myObjects[i].name .. \" - Patch: \" ..myObjects[i].patch)\n        end\n    else\n        ErrPrintf(\"An error occured. Does Fixture 1 Thru 10 exist?\")\n    end\nend"
        
        ,
        "suffix": ""
        
      },
      "2": {
        "description": "This example creates an object list with the selected sequence. It then dumps all information about the sequence using the Dump function."

        ,
        "code": "return function()\n    -- Create a list of one handle to the selected sequence and store it to a table. \n    local myObjects = ObjectList(\"Sequence\", {selected_as_default=true})\n    -- If the selection returned a table, then dump the first (and only) element.\n    if myObjects~= nil then\n        myObjects[1]:Dump()\n    else\n        ErrPrintf(\"An error occured.\")\n    end\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "Patch": {
    "prefix": "Patch()",
    "body": [
      "Patch()"
    ],
    "description": "Description\n-----------\n\nThe **ObjectList** Lua function returns a table with handles. The table is created based on a string input that should create a selection.\n\nArgument\n--------\n\n-   **String**:\\\n    The string must be a command that would create a range of objects in the command line.\n-   **Table** (optional):\\\n    The table can contain two possible named elements. Each element can have a boolean true or false value. See the examples below for how to use them.\n\n    -   **'reverse_order'**:\\\n        This must have a boolean value. If this is true then the returned list is in reverse order.\n\n    -   **'selected_as_default'**:\\\n        This must have a boolean value. If this is true then the object list will only contain the object that is selected in the pool. For instance, it only returns the currently selected filter from the filter pool.\n\nReturn\n------\n\n-   **Table**:\\\n    The function returns a table with handles to the objects based on the string argument."
    
    ,
    "examples": {
      "1": {
        "description": "This example prints the data connected to the handle. It uses the Dump() function:"

        ,
        "code": "return function()\n    -- This example dumps all information about the patch object\n    Printf(\"=============== START OF DUMP ===============\")\n    Patch():Dump()\n    Printf(\"================ END OF DUMP ================\")\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "Printf": {
    "prefix": "Printf(message)",
    "body": [
      "Printf(${1:message})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_printf.html#h2_873740972 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------\n\nThe Printf Lua function prints a string in the Command Line History and System Monitor.\n\nArgument[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_printf.html#h2_1267959487 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------\n\n-   **String**:\\\n    The string text to be printed to the Command Line History.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_printf.html#h2__607298120 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------\n\nThis function does not return anything."

    ,
    "examples": {
      "1": {
        "description": "This example prints \"Hello World!\" in the Command Line History:"

        ,
        "code": "return function()\n    Printf(\"Hello World!\")\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "Programmer": {
    "prefix": "Programmer()",
    "body": [
      "Programmer()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_programmer.html#h2_873740972 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------\n\nThe **Programmer** Lua function references the current programmer object.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_programmer.html#h2__615384334 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_programmer.html#h2__607298120 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The function returns a handle to the Programmer object."

    ,
    "examples": {
      "1": {
        "description": "This example uses the Dump() function on the programmer object:"

        ,
        "code": "return function ()\n    -- Dumps information about the programmer object.\n    Printf(\"=============== START OF DUMP ===============\")\n    Programmer():Dump()\n    Printf(\"================ END OF DUMP ================\")\nend"
        
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "ProgrammerPart": {
    "prefix": "ProgrammerPart()",
    "body": [
      "ProgrammerPart()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_programmerpart.html#h2_873740972 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------------\n\nThe **ProgrammerPart** Lua function references the current programmer part object.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_programmerpart.html#h2__615384334 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_programmerpart.html#h2__607298120 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The function returns a handle to the programmer part object."
    ,
    "examples": {
      "1": {
        "description": "This example uses the Dump() function on the programmer part object:"

        ,
        "code": "return function ()\n    -- Dumps information about the current programmer part object.\n    Printf(\"=============== START OF DUMP ===============\")\n    ProgrammerPart():Dump()\n    Printf(\"================ END OF DUMP ================\")\nend"
        
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "Pult": {
    "prefix": "Pult()",
    "body": [
      "Pult()"
    ],
    "description": "The **Pult** Lua function returns a handle to the current \"Pult\" object at position Root/GraphicsRoot/PultCollect. The \"Pult\" object contains display and device information.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_pult.html#h2__615384334 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_pult.html#h2__607298120 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The returned handle to the pult object."

    ,
    "examples": {
      "1": {
        "description": "This example prints the data connected to the handle. It uses the Dump() function:"

        ,
        "code": "return function()\n    -- The following prints the dump for the pult object\n    Printf(\"=============== START OF DUMP ===============\")\n    Pult():Dump()\n    Printf(\"================ END OF DUMP ================\")\nend"
        
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "ReleaseType": {
    "prefix": "ReleaseType()",
    "body": [
      "ReleaseType()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_releasetype.html#h2_873740972 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------\n\nThe ReleaseType Lua function returns a string with the type of release for the MA software. All the software versions available from MA Lighting will return \"Release\". Internally and during development, there can be other release types.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_releasetype.html#h2__615384334 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_releasetype.html#h2__607298120 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------\n\n-   **String**:\\\n    The returned string is the release type of the grandMA3 software."

    ,
    "examples": {
      "1": {
        "description": "This example prints the release type in the Command Line History:"

        ,
        "code": "return function()\n    Printf(\"The ReleaseType is \"..ReleaseType())\nend"
        
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "Root": {
    "prefix": "Root()",
    "body": [
      "Root()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_root.html#h2_873740972 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------\n\nThe **Root** Lua function returns a handle to the object at the root position.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_root.html#h2__615384334 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_root.html#h2__607298120 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The function returns a handle to the Root object."

    ,
    "examples": {
      "1": {
        "description": "This simple example prints the information of the Root object in the Command Line History using the Dump() function:"

        ,
        "code": "return function()\n    -- The following prints the dump for the root object\n    Printf(\"=============== START OF DUMP ===============\")\n    Root():Dump()\n    Printf(\"================ END OF DUMP ================\")\nend"
        
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "SelectedFeature": {
    "prefix": "SelectedFeature()",
    "body": [
      "SelectedFeature()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_selectedfeature.html#h2_873740972 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------------\n\nThe **SelectedFeature **Lua function returns the handle of the selected feature.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_selectedfeature.html#h2__615384334 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_selectedfeature.html#h2__607298120 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The returned handle for the selected feature."

    ,
    "examples": {
      "1": {
        "description": "This example prints all information about the selected feature in the Command Line History using the Dump() function:\n\n"

        ,
        "code": "return function ()\n    -- The following prints the dump for the selected feature object\n    Printf(\"=============== START OF DUMP ===============\")\n    SelectedFeature():Dump()\n    Printf(\"================ END OF DUMP ================\")\nend"
        
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "SelectedLayout": {
    "prefix": "SelectedLayout()",
    "body": [
      "SelectedLayout()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_selectedlayout.html#h2_873740972 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------------\n\nThe **SelectedLayout** Lua function returns the handle of the selected layout.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_selectedlayout.html#h2__615384334 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_selectedlayout.html#h2__607298120 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The returned handle for the selected layout."

    ,
    "examples": {
      "1": {
        "description": "This example prints all information about the selected layout in the Command Line History using the Dump() function:\n\n"

        ,
        "code": "return function ()\n    -- The following prints the dump for the selected layout object\n    Printf(\"=============== START OF DUMP ===============\")\n    SelectedLayout():Dump()\n    Printf(\"================ END OF DUMP ================\")\nend"
        
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "SelectedSequence": {
    "prefix": "SelectedSequence()",
    "body": [
      "SelectedSequence()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_selectedsequence.html#h2_873740972 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------------\n\nThe **SelectedSequence** Lua function returns the handle of the selected sequence.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_selectedsequence.html#h2__615384334 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_selectedsequence.html#h2__607298120 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The returned handle for the selected sequence."

    ,
    "examples": {
      "1": {
        "description": "This example prints all information about the selected sequence in the Command Line History using the Dump() function:\n\n"

        ,
        "code": "return function ()\n    -- The following prints the dump for the selected sequence object\n    Printf(\"=============== START OF DUMP ===============\")\n    SelectedSequence():Dump()\n    Printf(\"================ END OF DUMP ================\")\nend"
        
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "SelectedTimecode": {
    "prefix": "SelectedTimecode()",
    "body": [
      "SelectedTimecode()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_selectedtimecode.html#h2_873740972 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------------\n\nThe **SelectedTimecode** Lua function returns the handle of the selected timecode object.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_selectedtimecode.html#h2__615384334 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_selectedtimecode.html#h2__607298120 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The returned handle for the selected timecode object."

    ,
    "examples": {
      "1": {
        "description": "This example prints all information about the selected timecode show in the Command Line History using the Dump() function:\n\n"

        ,
        "code": "return function ()\n    -- The following prints the dump for the selected timecode object\n    local myTimecodeShow = SelectedTimecode()\n    if myTimecodeShow ~= nil then\n        Printf(\"=============== START OF DUMP ===============\")\n        myTimecodeShow:Dump()\n        Printf(\"================ END OF DUMP ================\")\n    end\nend"
        
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "SelectedTimer": {
    "prefix": "SelectedTimer()",
    "body": [
      "SelectedTimer()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_selectedtimer.html#h2_873740972 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------------\n\nThe **SelectedTimer** Lua function returns the handle of the selected timer object.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_selectedtimer.html#h2__615384334 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_selectedtimer.html#h2__607298120 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The returned handle for the selected timer object."

    ,
    "examples": {
      "1": {
        "description": "This example prints all information about the selected timer in the Command Line History using the Dump() function:"

        ,
        "code": "return function ()\n    -- The following prints the dump for the selected timer object\n    local myTimer = SelectedTimer()\n    if myTimer ~= nil then\n        Printf(\"=============== START OF DUMP ===============\")\n        myTimer:Dump()\n        Printf(\"================ END OF DUMP ================\")\n    end\nend"
          
        ,
        "suffix": ""

      }
    },
    "suffix": ""
    
  },
  "Selection": {
    "prefix": "Selection()",
    "body": [
      "Selection()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_selection.html#h2_873740972 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------\n\nThe **Selection** Lua function returns a handle to the object holding the current selection of fixtures.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_selection.html#h2__615384334 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_selection.html#h2__607298120 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The function returns a handle to the Selection object."

    ,
    "examples": {
      "1": {
        "description": "This example prints the information of the Selection object in the Command Line History using the Dump() function:"

        ,
        "code": "return function ()\n    -- The following prints the dump for the object for the selection\n    Printf(\"=============== START OF DUMP ===============\")\n    Selection():Dump()\n    Printf(\"================ END OF DUMP ================\")\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "SelectionCount": {
    "prefix": "SelectionCount()",
    "body": [
      "SelectionCount()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_selectioncount.html#h2_873740972 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------------\n\nThe **SelectionCount** Lua function returns a number indicating the total amount of currently selected fixtures.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_selectioncount.html#h2__615384334 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_selectioncount.html#h2__607298120 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------\n\n-   **Integer**:\\\n    The function returns an integer number depicting the total amount of fixtures in the current selection.\\\n    If there is no selection, then it returns 0."

    ,
    "examples": {
      "1": {
        "description": "This example prints the number of fixtures in the current selection to the Command Line History:"

        ,
        "code": "return function()\n    Printf('Number of fixtures in the current selection: %i', SelectionCount())\nend"
            
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "SelectionFirst": {
    "prefix": "SelectionFirst()",
    "body": [
      "SelectionFirst()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_selectionfirst.html#h2_873740972 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------------\n\nThe **SelectionFirst** Lua function returns a set of integers for the selection's first fixture. It is the patch index number and the XYZ grid values in the selection grid.\n\nIt is not required to use all four returned integers, but they are returned in order.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_selectionfirst.html#h2__615384334 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_selectionfirst.html#h2__607298120 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------\n\n-   **Integer**:\\\n    The returned number is the patch index of the first fixture in the current selection. It is not the FID or CID. The index is 0-based.\n-   **Integer**:\\\n    The returned number is the current position on the X-axis in the selection grid. The selection grid is 0-based.\n-   **Integer**:\\\n    The returned number is the current position on the Y-axis in the selection grid. The selection grid is 0-based.\n-   **Integer**:\\\n    The returned number is the current position on the Z-axis in the selection grid. The selection grid is 0-based."

    ,
    "examples": {
      "1": {
        "description": "This example prints the returned numbers of the first fixture in the selection, to the Command Line History:"

        ,
        "code": "return function()\n    -- Store the return in a local variable\n    local fixtureIndex, gridX, gridY, gridZ = SelectionFirst();\n\n    -- Cancel the plugin if no fixture is selected\n    assert(fixtureIndex,\"Please select a fixture and try again.\");\n\n    -- Print the index number of the first fixture in the selection\n    Printf(\"First selected fixture has index number: \"..fixtureIndex\n        ..\" and gridX value: \"..gridX\n        ..\" and gridY value: \"..gridY\n        ..\" and gridZ value: \"..gridZ);\nend"
         
        ,
        "suffix": ""

      }
    },
    "suffix": "### Related Functions[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_selectionfirst.html#h3_41554548 \"Link to this heading\")\n\n-   [SelectionNext](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_selectionnext.html)\n-   [GetSubfixture](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getsubfixture.html)\n-   [GetSubFixtureCount](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getsubfixturecount.html)"
    
  },
  "SelectionNext": {
    "prefix": "SelectionNext()",
    "body": [
      "SelectionNext(${1:fixtureIndex})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_selectionnext.html#h2_873740972 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------------\n\nThe **SelectionNext** function returns a set of integers for the next fixture in a selection based on the index number input as an argument. It is the index number in the patch and the XYZ grid values in the selection grid.\n\nIt is not required to use all four returned integers, but they are returned in order.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_selectionnext.html#h2__615384334 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------------\n\n-   **Integer**:\\\n    The index number is used to find the next fixture. The index number needs to be part of the current selection.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_selectionnext.html#h2__607298120 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------\n\n-   **Integer**:\\\n    The returned number is the patch index of the first fixture in the current selection. It is not the FID or CID. The index is 0-based.\n-   **Integer**:\\\n    The returned number is the current position on the X-axis in the selection grid. The selection grid is 0-based.\n-   **Integer**:\\\n    The returned number is the current position on the Y-axis in the selection grid. The selection grid is 0-based.\n-   **Integer**:\\\n    The returned number is the current position on the Z-axis in the selection grid. The selection grid is 0-based"

    ,
    "examples": {
      "1": {
        "description": "This example prints the patch index number and grid positions of all the fixtures in the current selection:"

        ,
        "code": "return function()\n    -- Store the return in a local variable\n    local fixtureIndex, gridX, gridY, gridZ = SelectionFirst()\n\n    -- Cancel the plugin if no fixture is selected\n    assert(fixtureIndex,\"Please select a (range of) fixture(s) and try again.\")\n    \n    -- Loop that prints the index and gridpositions of all the fixtures in the selection \n    while fixtureIndex do\n        Printf('The fixture has index number: %i and gridposition %i / %i / %i',\n          fixtureIndex, gridX, gridY, gridZ);\n        \n        -- Here is SelectionNext actually used to find the next fixture in the selection\n        fixtureIndex, gridX, gridY, gridZ = SelectionNext(fixtureIndex)\n    end\nend"

        ,
        "suffix": ""

      }
    },
    "suffix": "### Related Functions[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_selectionnext.html#h3_41554548 \"Link to this heading\")\n\n-   [SelectionFirst](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_selectionfirst.html)\n-   [GetSubfixture](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getsubfixture.html)\n-   [GetSubfixtureCount](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_getsubfixturecount.html)"

  },
  "SerialNumber": {
    "prefix": "SerialNumber()",
    "body": [
      "SerialNumber()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_serialnumber.html#h2_873740972 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------------\n\nThe **SerialNumber** Lua function returns the serial number of the grandMA3 hardware or grandMA3 onPC.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_serialnumber.html#h2__615384334 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_serialnumber.html#h2__607298120 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------\n\n-   **String**:\\\n    The returned string is the serial number of the grandMA3 hardware or grandMA3 onPC."

    ,
    "examples": {
      "1": {
        "description": "This example prints the serial number in the Command Line History:"

        ,
        "code": "return function()\n    Printf(\"Serial number: \" .. SerialNumber())\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "SetBlockInput": {
    "prefix": "SetBlockInput(block)",
    "body": [
      "SetBlockInput(${1:block})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_setblockinput.html#h2_873740972 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------------\n\nThe **SetBlockInput** function is an internal function used during the system tests. It stops input from USB-connected keyboards and mouse. The built-in keyboard on some models is internally connected using a USB connection, which is also blocked by this function. The block affects the station where the function is executed.\n\n![](https://help.malighting.com/grandMA3/2.1/Storage/grandma3-user-manual-publication/Client/Content/images/icons/important_gray.png) **Important:**\nShould the station be blocked and cannot be unblocked using a new Lua command, then pressing the keyboard keys A, S, D, and F simultaneously unblock the input again.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_setblockinput.html#h2__615384334 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------------\n\n-   **Boolean**:\\\n    The boolean indicates if the stations' input should be blocked or unblocked.\n    -   **true** (or 1): The station input is blocked.\n    -   **false** (or 0): The station input is unblocked.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_setblockinput.html#h2__607298120 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not return anything."

    ,
    "examples": {
      "1": {
        "description": "This example blocks mouse and keyboard input for 10 seconds:"

        ,
        "code": "return function()\n    -- Set a variable for yield time in seconds\n    yieldTime = 10\n    -- Set the block to true\n    SetBlockInput(true)\n    -- Wait the [yieldtime]\n    coroutine.yield(yieldTime)\n    -- Unblock the station\n    SetBlockInput(false)\nend"
        
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
     
  },
  "SetLED": {
    "prefix": "SetLED(moduleHandle, ledTable)",
    "body": [
      "SetLED(${1:moduleHandle}, ${1:ledTable})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_setled.html#h2_873740972 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------\n\nThe **SetLED** Lua function sends a table with a set of LED brightness values to an MA3Module. After around two seconds, the system automatically sets the LED values to what it believes it should be.\n\nBelow the example is a table listing all the grandMA3 hardware modules and which index number matches which LED on the hardware module.\n\n![](https://help.malighting.com/grandMA3/2.1/Storage/grandma3-user-manual-publication/Client/Content/images/icons/important_gray.png) **Important:**\nSetting a value above 0 for a table index number not connected to an LED can cause the module to crash and reboot\n\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_setled.html#h2__615384334 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle:**\\\n    This function does not accept any arguments.\n-   **Table:**\\\n    The table should be an indexed table with a set of integer values. The value range is from 0 to 255. This range indicates a brightness level. A special value of \"-1\" is used to release the LED to the system. The table should contain 1024 indexes.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_setled.html#h2__607298120 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------\n\nThis function does not return anything."
    
    ,
    "examples": {
      "1": {
        "description": "This example sets the LEDs on encoder 1 to green on a full-size console:"

        ,
        "code": "return function()\n    -- Create the LED table\n    local myLedTable = {}\n    -- Fill the table with default \"release\" value\n    for index=1,256 do\n        myLedTable[index] = -1;\n    end\n    -- Set values in the table\n    -- Encoder_inside1 = green\n    myLedTable[7] = 0\n    myLedTable[10] = 255\n    myLedTable[22] = 0\n    -- Encoder_outside1 = green\n    myLedTable[8] = 0\n    myLedTable[11] = 255\n    myLedTable[23] = 0\n    -- Get the handle for the MasterModule on a console\n    local usbDeviceHandle = Root().UsbNotifier.MA3Modules[\"UsbDeviceMA3 2\"]\n    -- Set the values for the LEDs\n    SetLED(usbDeviceHandle, myLedTable)\nend"
        
        ,
        "suffix": ""
        
      }
    },
    "suffix": "Hardware Modules LED Table[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_setled.html#h2_1987336602 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------------------\n\nThis table provides a list of index numbers (indexed from 1). The numbers are matched with elements on the three different kinds of hardware modules that are relevant. Notice that the naming here comes from the internal hardware definition and might not match exactly the print on the keys or the official name.\n\n| Index | grandMA3 Master Module(MM) | grandMA3 Fader Module Encoder(MFE) | grandMA3 Fader Module Crossfader(MFX) |\n| --- | --- | --- | --- |\n| 0 |   |   |   |\n| 1 | ENCODER_INSIDE4 Red | Executor 108 Button | Executor 108 Button |\n| 2 | ENCODER_OUTSIDE3 Red | Executor 110 Button | Executor 110 Button |\n| 3 | ENCODER_INSIDE2 Red | Executor 211 Button | Executor 211 Button |\n| 4 | EXEC_GrandKnob Red | Executor 212 Button | Executor 212 Button |\n| 5 | MENU | Executor 213 Button | Executor 213 Button |\n| 6 | ENCODER_OUTSIDE2 Red | Executor 214 Button | Executor 214 Button |\n| 7 | ENCODER_INSIDE1 Red | Executor 215 Button | Executor 215 Button |\n| 8 | ENCODER_OUTSIDE1 Red | Executor 209 Button | XFade1Btn Knob Red |\n| 9 | EXEC_GrandKnob  Green | Executor 210 Button | XFade2Btn Knob Red |\n| 10 | ENCODER_INSIDE1 Green | Executor 208 Button | Executor 209 Button |\n| 11 | ENCODER_OUTSIDE1 Green | Executor 115 Button | Executor 210 Button |\n| 12 | ENCODER_INSIDE2 Green | Executor 114 Button | Executor 208 Button |\n| 13 | ENCODER_OUTSIDE2 Green | Executor 113 Button | XFade1Btn Knob Green |\n| 14 | ENCODER_INSIDE3 Green | Executor 112 Button | XFade2Btn Knob Green |\n| 15 | ENCODER_OUTSIDE3 Green | Executor 207 Button | DEF_GO |\n| 16 | ENCODER_INSIDE4 Green | Executor 206 Button | Executor 115 Button |\n| 17 | ENCODER_OUTSIDE4 Green | Executor 205 Button | Executor 114 Button |\n| 18 | ENCODER_INSIDE5 Green | Executor 105 Button | Executor 113 Button |\n| 19 | ENCODER_OUTSIDE5 Green | Executor 106 Button | Executor 112 Button |\n| 20 | ENCODER_OUTSIDE4 Red | Executor 107 Button | Executor 207 Button |\n| 21 | EXEC_GrandKnob Blue | Executor 109 Button | Executor 206 Button |\n| 22 | ENCODER_INSIDE1 Blue | Executor 204 Button | Executor 205 Button |\n| 23 | ENCODER_OUTSIDE1 Blue | Executor 203 Button | XFade2 Fader Red |\n| 24 | ENCODER_INSIDE2 Blue | Executor 202 Button | XFade2 Fader Green |\n| 25 | ENCODER_OUTSIDE2 Blue | Executor 201 Button | XFade2 Fader Blue |\n| 26 | ENCODER_INSIDE3 Blue | Executor 111 Button | Executor 105 Button |\n| 27 | ENCODER_OUTSIDE3 Blue | Executor 101 Button | Executor 106 Button |\n| 28 | ENCODER_INSIDE4 Blue | Executor 102 Button | Executor 107 Button |\n| 29 | ENCODER_OUTSIDE4 Blue | Executor 103 Button | XFade1Btn Knob Blue |\n| 30 | ENCODER_INSIDE5 Blue | Executor 104 Button | XFade2Btn Knob Blue |\n| 31 | ENCODER_OUTSIDE5 Blue | Executor 312 Fader Red | Executor 109 Button |\n| 32 | ENCODER_OUTSIDE5 Red | Executor 311 Fader Red | Executor 204 Button |\n| 33 | ENCODER_INSIDE5 Red | Executor 413 Fader Red | Executor 203 Button |\n| 34 | ENCODER_INSIDE3 Red | Executor 411 Button | Executor 202 Button |\n| 35 | ESC | Executor 412 Button | Executor 201 Button |\n| 36 | CLEAR | Executor 414 Fader Red | XFade2Btn Button |\n| 37 | HELP | Executor 411 Fader Red | DEF_PAUSE |\n| 38 | GOTO | Executor 412 Fader Red | XFade1Btn Button |\n| 39 | ALIGN | Executor 415 Button | Executor 111 Button |\n| 40 | COPY | Executor 414 Button | Executor 101 Button |\n| 41 | OFF | Executor 413 Button | Executor 102 Button |\n| 42 | FULL | Executor 411 Fader Green | Executor 103 Button |\n| 43 | PLEASE | Executor 412 Fader Green | Executor 104 Button |\n| 44 | NUM4 | Executor 413 Fader Green | DEF_GOBACK |\n| 45 | NUM5 | Executor 414 Fader Green | XFade1 Fader Red |\n| 46 | UNDO | Executor 415 Fader Green | XFade1 Fader Green |\n| 47 | GROUP | Executor 311 Fader Green | XFade1 Fader Blue |\n| 48 | THRU | Executor 312 Fader Green | Executor 312 Fader Red |\n| 49 | NUM6 | Executor 313 Fader Green | Executor 311 Fader Red |\n| 50 | NUM2 | Executor 314 Fader Green | Executor 413 Fader Red |\n| 51 | STORE | Executor 315 Fader Green | Executor 411 Button |\n| 52 | ASSIGN | Executor 312 Button | Executor 412 Button |\n| 53 | AT | Executor 313 Fader Red | Executor 414 Fader Red |\n| 54 | MA1 | Executor 311 Button | Executor 411 Fader Red |\n| 55 | SLASH | Executor 411 Fader Blue | Executor 412 Fader Red |\n| 56 | NUM1 | Executor 412 Fader Blue | Executor 415 Button |\n| 57 | CUE | Executor 413 Fader Blue | Executor 414 Button |\n| 58 | TIME | Executor 414 Fader Blue | Executor 413 Button |\n| 59 | SEQUENCE | Executor 415 Fader Blue | Executor 411 Fader Green |\n| 60 | CHANNEL | Executor 311 Fader Blue | Executor 412 Fader Green |\n| 61 | NUM7 | Executor 312 Fader Blue | Executor 413 Fader Green |\n| 62 | NUM8 | Executor 313 Fader Blue | Executor 414 Fader Green |\n| 63 | NUM9 | Executor 314 Fader Blue | Executor 415 Fader Green |\n| 64 | NUM3 | Executor 315 Fader Blue | Executor 311 Fader Green |\n| 65 | MINUS | Executor 313 Button | Executor 312 Fader Green |\n| 66 | NUM0 | Executor 315 Fader Red | Executor 313 Fader Green |\n| 67 | DOT | Executor 314 Fader Red | Executor 314 Fader Green |\n| 68 | IF | Executor 314 Button | Executor 315 Fader Green |\n| 69 | PLUS | Executor 315 Button | Executor 312 Button |\n| 70 | LEARN | Executor 415 Fader Red | Executor 313 Fader Red |\n| 71 | Executor 297 Knob Red | Executor 307 Fader Red | Executor 311 Button |\n| 72 | Executor 295 \"X5 / Step\" | Executor 306 Fader Red | Executor 411 Fader Blue |\n| 73 | Executor 296 \"X6 / TC\" | Executor 408 Fader Red | Executor 412 Fader Blue |\n| 74 | Executor 298 Knob Red | Executor 406 Button | Executor 413 Fader Blue |\n| 75 | Executor 295 Knob Red | Executor 407 Button | Executor 414 Fader Blue |\n| 76 | Executor 296 Knob Red | Executor 409 Fader Red | Executor 415 Fader Blue |\n| 77 | GOFAST | Executor 406 Fader Red | Executor 311 Fader Blue |\n| 78 | Executor 195 \"X13 / Phaser\" | Executor 407 Fader Red | Executor 312 Fader Blue |\n| 79 | Executor 196 \"X14 / Macro\" | Executor 410 Button | Executor 313 Fader Blue |\n| 80 | Executor 295 Knob Green | Executor 409 Button | Executor 314 Fader Blue |\n| 81 | Executor 296 Knob Green | Executor 408 Button | Executor 315 Fader Blue |\n| 82 | Executor 297 Knob Green | Executor 406 Fader Green | Executor 313 Button |\n| 83 | Executor 298 Knob Green | Executor 407 Fader Green | Executor 315 Fader Red |\n| 84 | DELETE | Executor 408 Fader Green | Executor 314 Fader Red |\n| 85 | Executor 197 \"X15 / Page\" | Executor 409 Fader Green | Executor 314 Button |\n| 86 | GOBACKFAST | Executor 410 Fader Green | Executor 315 Button |\n| 87 | Executor 298 \"X8 / DMX\" | Executor 306 Fader Green | Executor 415 Fader Red |\n| 88 | STOMP | Executor 307 Fader Green | Executor 307 Fader |\n| 89 | SELECT | Executor 308 Fader Green | Executor 306 Fader Red |\n| 90 | Executor 295 Knob Blue | Executor 309 Fader Green | Executor 408 Fader Red |\n| 91 | Executor 296 Knob Blue | Executor 310 Fader Green | Executor 406 Button |\n| 92 | Executor 297 Knob Blue | Executor 307 Button | Executor 407 Button |\n| 93 | Executor 298 Knob Blue | Executor 308 Fader Red | Executor 409 Fader Red |\n| 94 | Executor 198 \"X16 / Exec\" | Executor 306 Button | Executor 406 Fader Red |\n| 95 | Executor 297 \"X7 / View\" | Executor 406 Fader Blue | Executor 407 Fader Red |\n| 96 | ON | Executor 407 Fader Blue | Executor 410 Button |\n| 97 | MOVE | Executor 408 Fader Blue | Executor 409 Button |\n| 98 | FIXTURE | Executor 409 Fader Blue | Executor 408 Button |\n| 99 | PRESET | Executor 410 Fader Blue | Executor 406 Fader Green |\n| 100 | EDIT | Executor 306 Fader Blue | Executor 407 Fader Green |\n| 101 | UPDATE | Executor 307 Fader Blue | Executor 408 Fader Green |\n| 102 | PAUSE | Executor 308 Fader Blue | Executor 409 Fader Green |\n| 103 | GOBACK | Executor 309 Fader Blue | Executor 410 Fader Green |\n| 104 | Executor 293 Knob Red | Executor 310 Fader Blue | Executor 306 Fader Green |\n| 105 | SOLO | Executor 308 Button | Executor 307 Fader Green |\n| 106 | HIGHLIGHT | Executor 310 Fader Red | Executor 308 Fader Green |\n| 107 | Executor 294 Knob Red | Executor 309 Fader Red | Executor 309 Fader Green |\n| 108 | Executor 291 Knob Red | Executor 309 Button | Executor 310 Fader Green |\n| 109 | Executor 292 Knob Red | Executor 310 Button | Executor 307 Button |\n| 110 | GO | Executor 410 Fader Red | Executor 308 Fader Red |\n| 111 | LIST | Executor 302 Fader Red | Executor 306 Button |\n| 112 | PAGE_DOWN | Executor 301 Fader Red | Executor 406 Fader Blue |\n| 113 | Executor 291 Knob Green | Executor 403 Fader Red | Executor 407 Fader Blue |\n| 114 | Executor 292 Knob Green | Executor 401 Button | Executor 408 Fader Blue |\n| 115 | Executor 293 Knob Green | Executor 402 Button | Executor 409 Fader Blue |\n| 116 | Executor 294 Knob Green | Executor 404 Fader Red | Executor 410 Fader Blue |\n| 117 | SELFIX | Executor 401 Fader Red | Executor 306 Fader Blue |\n| 118 | MA2 | Executor 402 Fader Red | Executor 307 Fader Blue |\n| 119 | PAGE_UP | Executor 405 Button | Executor 308 Fader Blue |\n| 120 | XKEYS | Executor 404 Button | Executor 309 Fader Blue |\n| 121 | BLIND | Executor 403 Button | Executor 310 Fader Blue |\n| 122 | Executor 192 \"X10\" | Executor 401 Fader Green | Executor 308 Button |\n| 123 | Executor 193 \"X11\" | Executor 402 Fader Green | Executor 310 Fader Red |\n| 124 | Executor 194 \"X12\" | Executor 403 Fader Green | Executor 309 Fader Red |\n| 125 | Executor 291 Knob Blue | Executor 404 Fader Green | Executor 309 Button |\n| 126 | Executor 292 Knob Blue | Executor 405 Fader Green | Executor 310 Button |\n| 127 | Executor 293 Knob Blue | Executor 301 Fader Green | Executor 410 Fader Red |\n| 128 | Executor 294 Knob Blue | Executor 302 Fader Green | Executor 302 Fader Red |\n| 129 | PREVIEW | Executor 303 Fader Green | Executor 301 Fader Red |\n| 130 | FREEZE | Executor 304 Fader Green | Executor 403 Fader Red |\n| 131 | DOWN | Executor 305 Fader Green | Executor 401 Button |\n| 132 | PREV | Executor 302 Button | Executor 402 Button |\n| 133 | RESET | Executor 303 Fader Red | Executor 404 Fader Red |\n| 134 | UP | Executor 301 Button | Executor 401 Fader Red |\n| 135 | Executor 291 \"X1 / Clone\" | Executor 401 Fader Blue | Executor 402 Fader Red |\n| 136 | Executor 292 \"X2 / Link\" | Executor 402 Fader Blue | Executor 405 Button |\n| 137 | Executor 293 \"X3 / Grid\" | Executor 403 Fader Blue | Executor 404 Button |\n| 138 | Executor 294 \"X4 / Layout\" | Executor 404 Fader Blue | Executor 403 Button |\n| 139 | Executor 191 \"X9\" | Executor 405 Fader Blue | Executor 401 Fader Green |\n| 140 | NEXT | Executor 301 Fader Blue | Executor 402 Fader Green |\n| 141 | All LEDs on the Keyboard | Executor 302 Fader Blue | Executor 403 Fader Green |\n| 142 | Small Screen Backlight | Executor 303 Fader Blue | Executor 404 Fader Green |\n| 143 | Letterbox Screen Backlight | Executor 304 Fader Blue | Executor 405 Fader Green |\n| 144 |   | Executor 305 Fader Blue | Executor 301 Fader Green |\n| 145 |   | Executor 303 Button | Executor 302 Fader Green |\n| 146 |   | Executor 305 Fader Red | Executor 303 Fader Green |\n| 147 |   | Executor 304 Fader Red | Executor 304 Fader Green |\n| 148 |   | Executor 304 Button | Executor 305 Fader Green |\n| 149 |   | Executor 305 Button | Executor 302 Button |\n| 150 |   | Executor 405 Fader Red | Executor 303 Fader Red |\n| 151 |   | RateBtn2 | Executor 301 Button |\n| 152 |   | ExecBtn1 | Executor 401 Fader Blue |\n| 153 |   | SpeedBtn1 | Executor 402 Fader Blue |\n| 154 |   | RateBtn1 | Executor 403 Fader Blue |\n| 155 |   | SpeedBtn2 | Executor 404 Fader Blue |\n| 156 |   | ProgBtn1 | Executor 405 Fader Blue |\n| 157 |   | ProgBtn2 | Executor 301 Fader Blue |\n| 158 |   | ProgBtn3 | Executor 302 Fader Blue |\n| 159 |   | ExecBtn3 | Executor 303 Fader Blue |\n| 160 |   | ExecBtn2 | Executor 304 Fader Blue |\n| 161 |   | Executor 201 Fader Red | Executor 305 Fader Blue |\n| 162 |   | Executor 201 Fader Green | Executor 303 Button |\n| 163 |   | Executor 201 Fader Blue | Executor 305 Fader Red |\n| 164 |   | Executor 202 Fader Red | Executor 304 Fader Red |\n| 165 |   | Executor 202 Fader Green | Executor 304 Button |\n| 166 |   | Executor 202 Fader Blue | Executor 305 Button |\n| 167 |   | Executor 203 Fader Red | Executor 405 Fader Red |\n| 168 |   | Executor 203 Fader Green | Executor 201 Fader Red |\n| 169 |   | Executor 203 Fader Blue | Executor 201 Fader Green |\n| 170 |   | Executor 204 Fader Red | Executor 201 Fader Blue |\n| 171 |   | Executor 204 Fader Green | Executor 202 Fader Red |\n| 172 |   | Executor 204 Fader Blue | Executor 202 Fader Green |\n| 173 |   | Executor 205 Fader Red | Executor 202 Fader Blue |\n| 174 |   | Executor 205 Fader Green | Executor 203 Fader Red |\n| 175 |   | Executor 205 Fader Blue | Executor 203 Fader Green |\n| 176 |   | Executor 206 Fader Red | Executor 203 Fader Blue |\n| 177 |   | Executor 206 Fader Green | Executor 204 Fader Red |\n| 178 |   | Executor 206 Fader Blue | Executor 204 Fader Green |\n| 179 |   | Executor 207 Fader Red | Executor 204 Fader Blue |\n| 180 |   | Executor 207 Fader Green | Executor 205 Fader Red |\n| 181 |   | Executor 207 Fader Blue | Executor 205 Fader Green |\n| 182 |   | Executor 208 Fader Red | Executor 205 Fader Blue |\n| 183 |   | Executor 208 Fader Green | Executor 206 Fader Red |\n| 184 |   | Executor 208 Fader Blue | Executor 206 Fader Green |\n| 185 |   | Executor 209 Fader Red | Executor 206 Fader Blue |\n| 186 |   | Executor 209 Fader Green | Executor 207 Fader Red |\n| 187 |   | Executor 209 Fader Blue | Executor 207 Fader Green |\n| 188 |   | Executor 210 Fader Red | Executor 207 Fader Blue |\n| 189 |   | Executor 210 Fader Green | Executor 208 Fader Red |\n| 190 |   | Executor 210 Fader Blue | Executor 208 Fader Green |\n| 191 |   | Executor 211 Fader Red | Executor 208 Fader Blue |\n| 192 |   | Executor 211 Fader Green | Executor 209 Fader Red |\n| 193 |   | Executor 211 Fader Blue | Executor 209 Fader Green |\n| 194 |   | Executor 212 Fader Red | Executor 209 Fader Blue |\n| 195 |   | Executor 212 Fader Green | Executor 210 Fader Red |\n| 196 |   | Executor 212 Fader Blue | Executor 210 Fader Green |\n| 197 |   | Executor 213 Fader Red | Executor 210 Fader Blue |\n| 198 |   | Executor 213 Fader Green | Executor 211 Fader Red |\n| 199 |   | Executor 213 Fader Blue | Executor 211 Fader Green |\n| 200 |   | Executor 214 Fader Red | Executor 211 Fader Blue |\n| 201 |   | Executor 214 Fader Green | Executor 212 Fader Red |\n| 202 |   | Executor 214 Fader Blue | Executor 212 Fader Green |\n| 203 |   | Executor 215 Fader Red | Executor 212 Fader Blue |\n| 204 |   | Executor 215 Fader Green | Executor 213 Fader Red |\n| 205 |   | Executor 215 Fader Blue | Executor 213 Fader Green |\n| 206 |   | Desklights | Executor 213 Fader Blue |\n| 207 |   | Letterbox Screen Backlight | Executor 214 Fader Red |\n| 208 |   | Small Screen Backlight | Executor 214 Fader Green |\n| 209 |   |   | Executor 214 Fader Blue |\n| 210 |   |   | Executor 215 Fader Red |\n| 211 |   |   | Executor 215 Fader Green |\n| 212 |   |   | Executor 215 Fader Blue |\n| 213 |   |   | Desklights |\n| 214 |   |   | Letterbox Screen Backlight |\n| 215 |   |   | Small Screen Backlight |"

  },
  "SetProgress": {
    "prefix": "SetProgress(progressBarHandle, progress)",
    "body": [
      "SetProgress(${1:progressBarHandle}, ${2:progress})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_setprogress.html#h2_873740972 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------\n\nThe **SetProgress** Lua function defines a value on the range for a progress bar. A handle input argument defines the progress bar. The progress bar needs have been created using the [StartProgress](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_startprogress.html) function.\n\nSee the [ProgressBar topic](https://help.malighting.com/grandMA3/2.1/HTML/lua_interface_progressbar.html) for more info regarding progress bars and links to other related functions.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_setprogress.html#h2__615384334 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The handle for the progress bar.\n-   **Integer**:\\\n    The desired value indicating the current status or position of the progress bar.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_setprogress.html#h2__607298120 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------\n\nThis function does not return anything."

    ,
    "examples": {
      "1": {
        "description": "This example sets a range value for the progress bar created using the example in the StartProgress topic (link above):"

        ,
        "code": "return function()\n    -- Sets the current value to 5 for a progress bar with the matching handle\n    SetProgress(progressHandle, 5)\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "SetProgressRange": {
    "prefix": "SetProgressRange(progressBarHandle, rangeStart, rangeEnd)",
    "body": [
      "SetProgressRange(${1:progressBarHandle}, ${2:rangeTart}, ${3:rangeEnd})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_setprogressrange.html#h2_873740972 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------------\n\nThe **SetProgressRange** Lua function defines a range for a progress bar.\n\nA handle input argument defines which progress bar it defines a range for. The progress bar must exist to have a handle. Progress bars can be created using the [StartProgress](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_startprogress.html) function.\n\nSee the [ProgressBar topic](https://help.malighting.com/grandMA3/2.1/HTML/lua_interface_progressbar.html) for more info regarding progress bars and links to other related functions.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_setprogressrange.html#h2__615384334 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The handle for the progress bar.\n-   **Integer**:\\\n    The start value for the range.\n-   **Integer**:\\\n    The end value for the range.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_setprogressrange.html#h2__607298120 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not return anything."
    
    ,
    "examples": {
      "1": {
        "description": "This example sets a range for the progress bar created using the example in the StartProgress topic (link above):"

        ,
        "code": "return function()\n    -- Sets the range of a progress bar with the matching handle\n    SetProgressRange(progressHandle, 1, 10)\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "SetProgressText": {
    "prefix": "SetProgressText(progressBarHandle, text)",
    "body": [
      "SetProgressText(${1:progressBarHandle}, ${2:text})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_setprogresstext.html#h2_873740972 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------------\n\nThe **SetProgressText** Lua function defines a text string to be displayed in a progress bar next to the progress bar title text. The title cannot be changed after creation, but this text can be changed. It could be used to describe the current step in the progress.\n\nA handle input argument defines which progress bar it defines a text for. The progress bar must exist for it to have a handle. Progress bars can be created using the [StartProgress](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_startprogress.html) function.\n\nSee the [ProgressBar topic](https://help.malighting.com/grandMA3/2.1/HTML/lua_interface_progressbar.html) for more info regarding progress bars and links to other related functions.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_setprogresstext.html#h2__615384334 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The handle for the progress bar.\n-   **String**:\\\n    The text string to be displayed.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_setprogresstext.html#h2__607298120 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not return anything."

    ,
    "examples": {
      "1": {
        "description": "This example sets a text string for the progress bar created using the example in the StartProgress topic (link above):"

        ,
        "code": "return function()\n    -- Sets the text next to progress title\n    SetProgressText(progressHandle, \"- This is text next to the progress title\")\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "SetVar": {
    "prefix": "SetVar(variableSetHandle, varName)",
    "body": [
      "SetVar(${1:variableSetHandle}, ${2:varName})"
    ],
    "description": "Description\\\n[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_setvar.html#h2_873740972 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------\n\nThe **SetVar** Lua function sets a value to a specific variable in a set of variables. To learn more about the variables in plugins, look at the [Variable Functions](https://help.malighting.com/grandMA3/2.1/HTML/lua_variables.html) topic.\n\nIf the variable exists, then the value is overwritten. If it does not exist, then it is created with value.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_setvar.html#h2__615384334 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The handle of variable set.\n-   **String**:\\\n    The name of the variable. It needs to be in quotation marks.\n-   **Value**:\\\n    The value can be a string, integer, or double.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_setvar.html#h2__607298120 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------\n\n-   **Boolean**:\n    -   True / 1: The variable was set.\n    -   False / 0: The variable was not set."

    ,
    "examples": {
      "1": {
        "description": "This example sets a value to the variable called \"myUserVar\" in the set of user variables if it exists."

        ,
        "code": "return function()\n    -- Sets the value of user variable \"myUserVar\" to \"Hello World\" and store the returned boolean in a Lua variable\n    local success = SetVar(UserVars(), \"myUserVar\", \"Hello World\")\n    -- Prints the ressult\n    if success then\n        Printf(\"Variable is stored.\")\n    else\n        Printf(\"Variable is NOT stored!\")\n    end\nend"
        
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "ShowData": {
    "prefix": "ShowData()",
    "body": [
      "ShowData()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_showdata.html#h2_873740972 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------\n\n**ShowData** is an object-free function that returns a handle to the object at position Root/ShowData.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_showdata.html#h2__615384334 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_showdata.html#h2__607298120 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The function returns a handle to the ShowData object."

    ,
    "examples": {
      "1": {
        "description": "This simple example prints the information of the ShowData object in the Command Line History using the Dump() function:"

        ,
        "code": "return function ()\n    -- The following prints the dump for the object for the show data\n    Printf(\"=============== START OF DUMP ===============\")\n    ShowData():Dump()\n    Printf(\"================ END OF DUMP ================\")\nend"

        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "ShowSettings": {
    "prefix": "ShowSettings()",
    "body": [
      "ShowSettings()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_showsettings.html#h2_873740972 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------------\n\n**ShowSettings** is an object-free function that returns a handle to the object at Root/ShowData/ShowSettings.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_showsettings.html#h2__615384334 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_showsettings.html#h2__607298120 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The function returns a handle to the ShowSettings object."

    ,
    "examples": {
      "1": {
        "description": "This simple example prints the information of the ShowSettings object using the Dump() function:"

        ,
        "code": "return function ()\n    -- The following prints the dump for the object for the show settings\n    Printf(\"=============== START OF DUMP ===============\")\n    ShowSettings():Dump()\n    Printf(\"================ END OF DUMP ================\")\nend"
        
        ,
        "suffix": ""
        
      }
    },
    "suffix": ""
    
  },
  "StartProgress": {
    "prefix": "StartProgress(title)",
    "body": [
      "StartProgress(${1:title})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_startprogress.html#h2_873740972 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------------\n\nThe **StartProgress** Lua function creates and displays a progress bar on all screens. A string input argument creates a title for the progress bar. The function returns a handle that is used to further interact with the progress bar.\n\nExecuting the function displays the progress bar on the screens. It only disappears using the [StopProgress](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_stopprogress.html) function - which needs the handle. So it is highly recommended to store the returned handle from the start function.\n\nSee the [ProgressBar topic](https://help.malighting.com/grandMA3/2.1/HTML/lua_interface_progressbar.html) for more info regarding progress bars and links to other related functions.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_startprogress.html#h2__615384334 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------------\n\n-   **String**:\\\n    The string is used as the title for the progress bar.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_startprogress.html#h2__607298120 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The returned handle is the identifier for the progress bar."
    
    ,
    "examples": {
      "1": {
        "description": "This creates and displays a progress bar on all screens. The progress bar does not disappear using this example - see the example in the StopProgress (link above) function to remove:"

        ,
        "code": "return function()\n    -- Create and display a progress bar with a title\n    -- IMPORTANT: The Lua variable 'progressHandle' is needed to remove the progressbar again - StopProgress()\n    progressHandle = StartProgress(\"ProgressBar Title\")\nend"

        ,
        "suffix": "![](https://help.malighting.com/grandMA3/2.1/Storage/grandma3-user-manual-publication/Client/Content/images/icons/important_gray.png) **Important:**\nRunning this example multiple times creates new progress bars that cannot be removed. So only run this once, and then remove it again using the StopProgress function (link above)."
        
      }
    },
    "suffix": ""
    
  },
  "StopProgress": {
    "prefix": "StopProgress(progressBarHandle)",
    "body": [
      "StopProgress(${1:progressBarHandle})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_stopprogress.html#h2_873740972 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------------\n\nThe **StopProgress** Lua function removes a progress bar. A handle input argument defines which progress bar it removes. The progress bar must exist before it can be removed. Progress bars are created using the [StartProgress](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_startprogress.html) function.\n\nSee the [ProgressBar topic](https://help.malighting.com/grandMA3/2.1/HTML/lua_interface_progressbar.html) for more info regarding progress bars and links to other related functions.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_stopprogress.html#h2__615384334 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The handle for the progress bar to be stopped.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_stopprogress.html#h2__607298120 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------\n\nThis function does not return anything."
    
    ,
    "examples": {
      "1": {
        "description": "This example stops the progress bar created using the example in the StartProgress topic (link above):"

        ,
        "code": "return function()\n    -- Stops and closes the progress bar with the matching handle\n    StopProgress(progressHandle)\nend"

        ,
        "suffix": ""
      }
    },
    "suffix": ""
    
  },
  "StrToHandle": {
    "prefix": "StrToHandle(handleString)",
    "body": [
      "StrToHandle(${1:handleString})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_strtohandle.html#h2_873740972 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------------\n\nThe object-free **StrToHandle** Lua function converts a string with a hexadecimal number format into a handle. The string needs to correlate with an actual handle.\n\nSee the [Handle topic](https://help.malighting.com/grandMA3/2.1/HTML/lua_handle.html) for more info regarding handles and links to other related functions.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_strtohandle.html#h2__615384334 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------\n\n-   **String**:\\\n    The string with a handle number in a hexadecimal format.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_strtohandle.html#h2__607298120 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The returned handle based on the string with a hexadecimal number."

    ,
    "examples": {
      "1": {
        "description": "This example prints the handle hex number for the selected sequence. It also converts the string back to a handle and uses this to print the name of the sequence:"

        ,
        "code": "return function()\n    -- Store a variable with the string of the handle converted to hex\n    local mySeqStr = HandleToStr(SelectedSequence())\n    -- Print some feedback with the handle in a string version\n    Printf(\"The handle for the selected sequence (string version): %s\", mySeqStr)\n    -- Print some feedback where the string is converted back to a handle\n    Printf(\"The name of the selected sequence is: %s\", StrToHandle(mySeqStr).name)\nend"

        ,
        "suffix": ""
      }
    },
    "suffix": ""
    
  },
  "TextInput": {
    "prefix": "TextInput(title, textGuide, xPosition, yPosition)",
    "body": [
      "TextInput(${1:title}, ${2:textGuide}, ${3:xPosition}, ${4:yPosition})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_textinput.html#h2_873740972 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------\n\nThe **TextInput** Lua function opens a text input pop-up and returns the typed input as a string. It is part of the user interface functions.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_textinput.html#h2__615384334 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------\n\n-   **String** (optional):\\\n    This string is the title for the pop-up. The title bar has a default \"Edit\" text at the beginning of the title that cannot be removed.\n-   **String** (optional):\\\n    This string is the text already in the input field - can be used to provide user guidance.\n-   **Integer** (optional):\\\n    This integer defines a position on the x-axis where the pop-up should appear (on all screens). \"0\" is on the left side of the screen. Nil or undefined is centered.\n-   **Integer** (optional):\\\n    This integer defines a position on the y-axis where the pop-up should appear (on all screens). \"0\" is at the top of the screen. Nil or undefined is centered.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_textinput.html#h2__607298120 \"Link to this heading\")\n--------------------------------------------------------------------------------------------------------------------------\n\n-   **String**:\\\n    The returned user input."

    ,
    "examples": {
      "1": {
        "description": "To open a text input and print the entered value in the Command Line History, create a plugin with this code:"

        ,
        "code": "return function()\n    -- Create a pop-up with the title and an input field containing some default text\n    -- The returned text is store in a Lua variable\n    local input = TextInput(\"This is the title\",\"Please provide your input here\")\n    -- Print the returned text value\n    Printf(\"You entered this message: %s\",tostring(input))\nend"

        ,
        "suffix": ""
      }
    },
    "suffix": ""
    
  },
  "Time": {
    "prefix": "Time()",
    "body": [
      "Time()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_time.html#h2_873740972 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------\n\nThe **Time** function returns the time (in seconds) the station has been on, as a number (float). It is basically a stopwatch that starts when the grandMA3 application starts. It is not the current time of day or the session online time.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_time.html#h2__615384334 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_time.html#h2__607298120 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------\n\n-   **Number**:\\\n    The returned number (float) is the on-time for the station."

    ,
    "examples": {
      "1": {
        "description": "This example finds, formats, and prints the time."

        ,
        "code": "return function()\n    -- Get the current time\n    local time = Time()\n\n    --Calculate the different elements\n    local days = math.floor(time/86400)\n    local hours = math.floor((time % 86400)/3600)\n    local minutes = math.floor((time % 3600)/60)\n    local seconds = math.floor(time % 60)\n\n    --Print the result\n    Printf(\"The time is %d:%02d:%02d:%02d\", days, hours, minutes, seconds)\nend"

        ,
        "suffix": ""
      }
    },
    "suffix": ""
    
  },
  "Timer": {
    "prefix": "Timer(timedFunction, waitSeconds, iterations, TimerCleanup, passedObjectHandle)",
    "body": [
      "Timer(${1:timedFunction}, ${2:waitSeconds}, ${3:iterations}, ${4:TimerCleanup}, ${5:passedObjectHandle})"
    ],
    "description": "Description\n-----------\n\nThe **Timer** Lua function call a different function using a timer. The other function can be called multiple times using the timer interval. \n\nArguments\n---------\n\n-   **Function**:\\\n    This is the name of the function that is called multiple times using the timer.\n\n-   **Integer**:\\\n    This is the wait time between the calls. The value is in seconds.\n\n-   **Integer**:\\\n    This is the number of times the function is called.\n\n-   **Function** | **nil** (optional):\\\n    This is an optional argument that is the name of a function that is called when the Timer function is finished.\n\n-   **Handle** (optional):\\\n    This is an optional argument for a handle to an object that is passed to the called function.\n\nReturn\n------\n\nThis function does not return anything."

    ,
    "examples": {
      "1": {
        "description": "This example prints a greeting three times and then calls a clean up function:"

        ,
        "code": "-- Function that will be called several times.\nfunction TimedFunction()\n    -- Check the value of RunAmount and print something.\n    if RunAmount < 1 then\n        Printf(\"Hello\")\n    else\n        Printf(\"Hello again\")\n    end\n    -- Add 1 to the RunAmount variable.\n    RunAmount = RunAmount + 1\nend\n\n-- Cleanup function.\nfunction TimerCleanup()\n    Printf(\"Goodbye\")\n    -- Delete the RunAmount variable.\n    RunAmount = nil\nend\n\n-- Function with the Timer call.\nfunction Main()\n    -- Set a wait variable.\n    local waitSeconds = 1\n    -- Set a variable with the number of iterations.\n    local iterations = 3\n    -- Create a counter variable and set it to 0.\n    RunAmount = 0\n    -- Call the timer function.\n    Timer(TimedFunction, waitSeconds, iterations, TimerCleanup);\nend\n\n-- call the main function.\nreturn Main"

        ,
        "suffix": ""
      }
    },
    "suffix": ""
    
  },
  "ToAddr": {
    "prefix": "ToAddr(objectHandle, returnType)",
    "body": [
      "ToAddr(${1:objectHandle}, ${2:returnType})"
    ],
    "description": "Description\n-----------\n\nThe **ToAddr** Lua object-free function converts a handle to an address string that can be used in commands.\n\nSee the Handle topic for more info regarding handles, addresses, and links to other related functions.\n\nArguments\n---------\n\n-   **Handle**:\\\n    The function takes a handle of an object as an argument.\n-   **Boolean** (optional):\\\n    This returns the address using the names instead of numbers. The default is False, which returns the number version of the address.\n\nReturn\n------\n\n-   **String**:\\\n    String with the address value."
    
    ,
    "examples": {
      "1": {
        "description": "This example prints the address of the selected sequence in both the numbered and named versions."

        ,
        "code": "return function ()\n    local mySequence = SelectedSequence()\n    -- Print the address to the selected sequence in number and name format.\n    Printf(ToAddr(mySequence))\n    Printf(ToAddr(mySequence, true))\nend"

        ,
        "suffix": ""
      }
    },
    "suffix": ""
    
  },
  "TouchObj": {
    "prefix": "TouchObj()",
    "body": [
      "TouchObj()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_touchobj.html#h2_873740972 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------\n\nThe **TouchObj** function returns the handle to the first found touch object.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_touchobj.html#h2__615384334 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_touchobj.html#h2__607298120 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The function returns the handle to the touch object."

    ,
    "examples": {
      "1": {
        "description": "This example prints information about the touch object using the Dump() function:"
        
        ,
        "code": "return function()\n    -- Print all informatin about the TouchObj object\n    Printf(\"=============== START OF DUMP ===============\")\n    TouchObj():Dump()\n    Printf(\"================ END OF DUMP ================\")\nend"
        
        ,
        "suffix": ""
      }
    },
    "suffix": ""
    
  },
  "Unhook": {
    "prefix": "Unhook(hookId)",
    "body": [
      "Unhook(${1:hookId})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_unhook.html#h2_873740972 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------\n\nThe **Unhook** Lua function removes a hook.\n\nHooks are an automatically triggered function that activates when a grandMA3 object changes. A hook can be created using the [HookObjectChange](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_hookobjectchange.html) function.\n\nArguments\n---------\n\n-   **Integer**:\\\n    This must be the integer matching the hook that should be unhooked.\n\n![](https://help.malighting.com/grandMA3/2.1/Storage/grandma3-user-manual-publication/Client/Content/images/icons/tip_gray.png) **Hint:**\nAll hooks can be listed using the [DumpAllHooks](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_dumpallhooks.html) function, but this does not reveal the corresponding hook integer ID. Use the [UnhookMultiple](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_unhookmultiple.html) function if the integer is unknown.\n\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_unhook.html#h2__607298120 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------\n\nThis function does not return anything.\n\n![](https://help.malighting.com/grandMA3/2.1/Storage/grandma3-user-manual-publication/Client/Content/images/icons/tip_gray.png) **Hint:**\nSee also these related functions: [DumpAllHooks](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_dumpallhooks.html), [HookObjectChange](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_hookobjectchange.html), [UnhookMultiple](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_unhookmultiple.html).\n"

    ,
    "examples": {
      "1": {
        "description": "This example unhooks the hook created using the example in the HookObjectChange - please run that example before this one."

        ,
        "code": "return function()\n    -- Unhooks the specific Hook integer ID.\n    Unhook(SequenceHookId)\nend"

        ,
        "suffix": ""
      }
    },
    "suffix": ""
    
  },
  "UnhookMultiple": {
    "prefix": "UnhookMultiple(functionName, targetObjectHandle, contextObjectHandle)",
    "body": [
      "UnhookMultiple(${1:functionName}, ${2:targetObjectHandle}, ${3:contextObjectHandle})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_unhookmultiple.html#h2_873740972 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------------\n\nThe **UnhookMultiple** Lua function unhooks multiple hooks based on an input. This input acts like a filter to identify all the hooks that should be unhooked.\n\nThe [DumpAllHooks](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_dumpallhooks.html) function can be used to list all the existing hooks in the system.\n\nArguments\n---------\n\n-   **Function** or **nil**:\\\n    This must be the name of a triggered function or nil.\n\n-   **Handle** or **nil**:\\\n    This must be the handle for the target object or nil.\n-   **Handle** or **nil**:\\\n    The must be the handle for the context object or nil.\n\nThe target and context names can be seen using the [DumpAllHooks](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_dumpallhooks.html) function.\n\nReturn\n------\n\n-   **Integer**:\\\n    The function returns an integer indicating how many hooks were unhooked.\n\n![](https://help.malighting.com/grandMA3/2.1/Storage/grandma3-user-manual-publication/Client/Content/images/icons/tip_gray.png) **Hint:**\nSee also these related functions: [DumpAllHooks](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_dumpallhooks.html), [HookObjectChange](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_hookobjectchange.html), [Unhook](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_unhook.html)."

    ,
    "examples": {
      "1": {
        "description": "This example unhooks all hooked related to the function created in the example for the HookObjectChange - please run the example from that topic before running this one."

        ,
        "code": "return function ()\n    -- Unhooks all hooks related to the \"MySequencePoolCallback\" function.\n    local amount = UnhookMultiple(MySequencePoolCallback)\n    -- Print how many hooks that were unhooked.\n    Printf(amount .. \" hook(s) were unhooked.\")\nend"

        ,
        "suffix": ""
      }
    },
    "suffix": ""
    
  },
  "UserVars": {
    "prefix": "UserVars()",
    "body": [
      "UserVars()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_uservars.html#h2_873740972 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------\n\nThe **UserVars** function returns a handle to the set of user variables. Read more about these in the [Variables](https://help.malighting.com/grandMA3/2.1/HTML/macro_variables.html) topic in the Macro section.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_uservars.html#h2__615384334 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_uservars.html#h2__607298120 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The function returns a handle of the set of user variables."
    
    ,
    "examples": {
      "1": {
        "description": "This example sets, gets, and deletes a user variable:"
        
        ,
        "code": "return function()\n    -- Stores a local Lua variable with the handle for the user variables.\n    local variableSection = UserVars()\n\n    -- Sets a user variable with an integer value using the SetVar function.\n    SetVar(variableSection, \"myUserVar\", 42)\n\n    -- Prints the user variable using the GetVar function.\n    Printf(\"The value  of myUserVar is: \" .. GetVar(variableSection, \"myUserVar\"))\n\n    -- Deletes the user variable using the DelVar function.\n    DelVar(variableSection, \"myUserVar\")\nend"
        
        ,
        "suffix": ""
      }
    },
    "suffix": ""
    
  },
  "Version": {
    "prefix": "Version()",
    "body": [
      "Version()"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_version.html#h2_873740972 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------\n\nThe **Version** Lua function returns the software version.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_version.html#h2__615384334 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_version.html#h2__607298120 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------\n\n-   **String**:\\\n    The returned string is the version of the grandMA3 software."

    ,
    "examples": {
      "1": {
        "description": "This example prints the software version in the Command Line History:"

        ,
        "code":"return function()\n    local textVersion, major, minor, streaming, ui = Version();\n    Printf(\"Software version is: %s\", textVersion)\n    Printf(\"Major version number is: %i\", major)\n    Printf(\"Minor version number is: %i\", minor)\n    Printf(\"Streaming version number is: %i\", streaming)\n    Printf(\"UI version number is: %i\", ui)\nend\n"
        
        ,
        "suffix": ""
      }
    },
    "suffix": ""
    
  }
}