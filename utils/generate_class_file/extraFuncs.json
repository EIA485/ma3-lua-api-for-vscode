{
	"UIGrid":"---@return GridBase\nfunction UIGrid:GridGetBase() end\n---@return GridData\nfunction UIGrid:GridGetData() end\n---@return GridSelection\nfunction UIGrid:GridGetSelection() end\n---@param x integer\n---@param y integer\nfunction UIGrid:GridMoveSelection(x, y) end\n---@return table\nfunction UIGrid:GridGetSelectedCells() end\n---@return GridSettings\nfunction UIGrid:GridGetSettings() end\n---@return {r: integer, c: integer}\nfunction UIGrid:GridGetDimensions() end\n---@return {v: table<integer,integer>, h: table<integer,integer>}\nfunction UIGrid:GridGetScrollOffset() end\n---@param columnId integer\n---@param size integer\nfunction UIGrid:GridSetColumnSize(columnId, size) end\n---@return {r: integer, c: integer}\nfunction UIGrid:GridGetScrollOffset() end\n---@param cell {r: integer, c: integer}\n---@return {text, color:{text, back}}\nfunction UIGrid:GridGetCellData(cell) end\n---@param cell {r: integer, c: integer}\n---@return bool\nfunction UIGrid:GridIsCellVisible(cell) end\n---@param cell {r: integer, c: integer}\n---@return bool\nfunction UIGrid:GridCellExists(cell) end\n---@param cell {r: integer, c: integer}\n---@return bool\nfunction UIGrid:GridIsCellReadOnly(cell) end\n---@param cell {r: integer, c: integer}\nfunction UIGrid:GridScrollCellIntoView(cell) end\n---@param cell {r: integer, c: integer}\n---@return {x, y, w, h}\nfunction UIGrid:GridGetCellDimensions(cell) end\n---@return ParentRowId : integer?\n---@return rowId : integer\nfunction UIGrid:GridGetParentRowId(rowId) end\n---@return {r: integer, c: integer}?\nfunction UIGrid:GridsGetExpandHeaderCell() end\n---@return bool?\nfunction UIGrid:GridsGetExpandHeaderCellState() end\n---@param cell {r: integer, c: integer}\n---@return integer?\nfunction UIGrid:GridsGetLevelButtonWidth(cell) end\n---@param columnId integer\n---@return integer?\nfunction UIGrid:GridsGetColumnById(columnId) end\n---@param rowId integer\n---@return integer?\nfunction UIGrid:GridsGetRowById(rowId) end\n---@param cell {r: integer, c: integer}\n---@return bool\nfunction UIGrid:FSExtendedModeHasDots(cell) end",
	"UIObject":"---@return Overlay\nfunction UIObject:GetOverlay() end\n---@return Display\nfunction UIObject:GetDisplay() end\n---@return integar displayIndex\nfunction UIObject:GetDisplayIndex() end\n---@return Screen\nfunction UIObject:GetScreen() end\n---@return integer\nfunction UIObject:GetUiChildrenCount() end\nfunction UIObject:ClearUIChildren() end\n---@param index integer\n---@return UIObject\nfunction UIObject:GetUIChild(index) end\n---@return UIObject[]\nfunction UIObject:UIChildren() end\n---@param seconds number?\n---@param force bool?\n---@return bool?\nfunction UIObject:WaitInit(seconds, force) end\n---@param amount integer\n---@param waitSeconds number\n---@return bool?\nfunction UIObject:WaitChildren(amount, waitSeconds) end\n---@param CallBack function\n---@param ... @passed to the callback\n---@return bool?\nfunction UIObject:HookDelete(CallBack, ...) end\n---@return bool\nfunction UIObject:IsVisible() end\n---@return bool\nfunction UIObject:IsEnabled() end\n---@param topicName string\nfunction UIObject:SetContextSensHelpLink(topicName) end",
	"UILayoutGrid":"---@param index integer\n---@return integer\nUILayoutGrid:UILGGetColumnWidth(index) end\n---@param index integer\n---@return integer\nUILayoutGrid:UILGGetRowHeight(index) end\n---@param index integer\n---@return integer\nUILayoutGrid:UILGGetColumnAbsXLeft(index) end\n---@param index integer\n---@return integer\nUILayoutGrid:UILGGetColumnAbsXRight(index) end\n---@param index integer\n---@return integer\nUILayoutGrid:UILGGetRowAbsYTop(index) end\n---@param index integer\n---@return integer\nUILayoutGrid:UILGGetRowAbsYBottom(index)",
	"Overlay":"---@param callbackName string\n---@param ctx any?\nOverlay:OverlaySetCloseCallback(callbackName, ctx)"
}