

{  
  "AddFixtures": {
      "prefix": "AddFixtures",
      "body": [
      "AddFixtures(table)"
      ],
      "description": "Description\n-----------\n\nThe **AddFixture** Lua function adds fixtures to the patch. The argument for the function is a table, which must contain valid data for the function to succeed. The function returns a \"true\" boolean value if the addition was a success. The function must be run with the command line in the correct patch destination.\n\nArguments\n---------\n\n-   **Table**:\\\n    The table must contain valid data. This is a list of possible table elements. It is not necessary to add all elements.\n\n    -   **mode**:\\\n        This must be a **handle **to a valid \"dmx_mode\". This defines a specific fixture type in a specific mode.\n\n    -   **amount**:\\\n        This is an **integer **number that defines how many fixtures should be added.\n\n    -   **name** (optional):\\\n        This is a string with the name of the (first) fixture.\n\n    -   **fid** (optional):\\\n        This is a **string** with the fixture's FID.\n\n    -   **cid **(optional):\\\n        This is a **string** with the CID for the fixture. This table field is only valid if the \"idtype\" is not \"Fixture\".\n\n    -   **idtype** (optional):\\\n        This is a **string** with the name of the ID Type. This is only needed if the type is different than \"Fixture\".\n\n    -   **patch** (optional):\\\n        This is a **table** with up to eight **strings**. The string must indicate a universe and a start address in the universe. The two must be separated by a dot. Each table element is used for the up to eight DMX breaks in the patch.\n\n    -   **layer** (optional):\\\n        This is a **string** with the layer name.\n\n    -   **class** (optional):\\\n        This is a **string** with the class name.\n\n    -   **parent** (optional):\\\n        This is a **handle** of the parent fixture. It is only needed if the fixture should be a sub-fixture of an existing fixture.\n    -   **insert_index** (optional):\\\n        This is an **integer** indicating an insert index number.\n\n    -   **undo** (optional):\\\n        This is a **string** with an undo text.\n\nReturn\n------\n\n-   **Boolean** or **nil**:\\\n    The returned table contains key value pairs with configuration information. See the example below."
  },
  "SetProgressRange": {
    "prefix": "SetProgressRange",
    "body": [
      "SetProgressRange(${1:handle}, ${2:start}, ${3:end})"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_setprogressrange.html#h2_873740972 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------------\n\nThe SetProgressRange Lua function defines a range for a progress bar.\n\nA handle input argument defines which progress bar it defines a range for. The progress bar must exist to have a handle. Progress bars can be created using the [StartProgress](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_startprogress.html) function.\n\nSee the [ProgressBar topic](https://help.malighting.com/grandMA3/2.1/HTML/lua_interface_progressbar.html) for more info regarding progress bars and links to other related functions.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_setprogressrange.html#h2__615384334 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The handle for the progress bar.\n-   **Integer**:\\\n    The start value for the range.\n-   **Integer**:\\\n    The end value for the range.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_setprogressrange.html#h2__607298120 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not return anything.\n\nExample[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_setprogressrange.html#h2_1689083776 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------------\n\nThis example sets a range for the progress bar created using the example in the StartProgress topic (link above):\n\n|\n\nCopy Code\n\nLua\n\n |\n|\n\nreturn function()\\\n    -- Sets the range of a progress bar with the matching handle\\\n    SetProgressRange(progressHandle, 1, 10)\\\nend\n\n |\n\n© 2024 MA Lighting Technology GmbH | Dachdeckerstr. 16 | D-97297 Waldbüttelbrunn | Germany\\\nPh"
  },
  "StartProgress": {
    "prefix": "StartProgress",
    "body": [
      "StartProgress(${1:title}"
    ],
    "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_startprogress.html#h2_873740972 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------------\n\nThe StartProgress Lua function creates and displays a progress bar on all screens. A string input argument creates a title for the progress bar. The function returns a handle that is used to further interact with the progress bar.\n\nExecuting the function displays the progress bar on the screens. It only disappears using the [StopProgress](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_stopprogress.html) function - which needs the handle. So it is highly recommended to store the returned handle from the start function.\n\nSee the [ProgressBar topic](https://help.malighting.com/grandMA3/2.1/HTML/lua_interface_progressbar.html) for more info regarding progress bars and links to other related functions.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_startprogress.html#h2__615384334 \"Link to this heading\")\n---------------------------------------------------------------------------------------------------------------------------------\n\n-   **String**:\\\n    The string is used as the title for the progress bar.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_startprogress.html#h2__607298120 \"Link to this heading\")\n------------------------------------------------------------------------------------------------------------------------------\n\n-   **Handle**:\\\n    The returned handle is the identifier for the progress bar.\n\nExample[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_startprogress.html#h2_1689083776 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------\n\nThis creates and displays a progress bar on all screens. The progress bar does not disappear using this example - see the example in the StopProgress (link above) function to remove:"
  },
  "SelectionCount": {
      "prefix": "SelectionCount",
      "body": [
      "SelectionCount()"
      ],
      "description": "Description[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_selectioncount.html#h2_873740972 \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------------------------\n\nThe **SelectionCount** Lua function returns a number indicating the total amount of currently selected fixtures.\n\nArguments[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_selectioncount.html#h2__615384334 \"Link to this heading\")\n----------------------------------------------------------------------------------------------------------------------------------\n\nThis function does not accept any arguments.\n\nReturn[](https://help.malighting.com/grandMA3/2.1/HTML/lua_objectfree_selectioncount.html#h2__607298120 \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------\n\n-   **Integer**:\\\n    The function returns an integer number depicting the total amount of fixtures in the current selection.\\\n    If there is no selection, then it returns 0."
  }
}